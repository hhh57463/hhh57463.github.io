<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-01-29T13:20:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mindol</title><subtitle>Mindol&apos;s Blog</subtitle><author><name>Mindol</name></author><entry><title type="html">[Flutter] - Widget</title><link href="http://localhost:4000/flutter/2023/01/28/Flutter%EA%B8%B0%EC%B4%88-Widget.html" rel="alternate" type="text/html" title="[Flutter] - Widget" /><published>2023-01-28T06:00:01+09:00</published><updated>2023-01-28T06:00:01+09:00</updated><id>http://localhost:4000/flutter/2023/01/28/Flutter%EA%B8%B0%EC%B4%88-Widget</id><content type="html" xml:base="http://localhost:4000/flutter/2023/01/28/Flutter%EA%B8%B0%EC%B4%88-Widget.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>Flutter는 게임엔진처럼 동작, 엔진이 화면 상의 모든 픽셀을 그림.<br />
게임 엔진은 무언가를 렌더링할 때 호스트 플랫폼을 사용하지 않고 스스로 그래픽을 그림, Flutter도 같음.</p>

<h2 id="react-native-vs-flutter">React Native vs Flutter</h2>
<hr />
<p>React Native: 네이티브 앱 운영체제 상에서 가능한 위젯을 사용하고 싶을 때,<br />
호스트 운영체제가 만들어주는 위젯을 사용하는 크로스플랫폼 어플리케이션을 만들 때<br />
Flutter: 세밀한 디자인 요구사항이 들어가며, 요소들이나 애니메이션들을 전부 커스터마이징 해야할 때<br />
(ios, android 앱처럼이 아닌, 자체의 디자인으로 이루어진 어플리케이션을 만들 때)</p>

<h2 id="widget">Widget</h2>
<hr />
<p>Widget(위젯)</p>
<ul>
  <li>Flutter: 앱의 UI를 만드는 것</li>
  <li>프로그래밍: class 생성</li>
</ul>

<p>Widget을 레고 블럭을 조립한다고 생각, Flutter에 있는 모든 건 Widget<br />
Widget을 합치는 방식으로 앱을 제작해나감<br />
공식 위젯: <a href="https://docs.flutter.dev/development/ui/widgets">flutter Widget 카탈로그</a>에 가면 애니메이션, 레이아웃 등 여러 위젯을 볼 수 있음<br />
클래스를 생성할때 flutter SDK에 있는 3개의 core Widget중 하나를 상속받아야함<br />
StatelessWidget: 가장 기초적인 위젯으로 바꿔주는 클래스로 그냥 화면에 무언가 띄어주는 용도</p>

<h2 id="build-method">build Method</h2>
<hr />
<p>모든 위젯은 build 메소드를 구현해야 함<br />
build 메소드의 역할<br />
Flutter가 실행하게 되는데, build 메소드가 반환하는걸 화면에서 보여줌<br />
(위젯의 UI를 만드는 것)</p>

<h2 id="root-widget">root Widget</h2>
<hr />
<p>앱의 시작 위젯으로 모든 위젯의 시작점<br />
앱의 root Widget은 두 개의 옵션 중 하나를 반환해야 함</p>
<ul>
  <li>material: 구글의 디자인 시스템</li>
  <li>cupertino:  애플의 디자인 시스템</li>
</ul>

<p>🤔 하지만 우리는 구글, 애플의 디자인이 아닌 우리만의 디자인을 만들고 싶은데 왜 material, cuperino를 반환해야 하는 걸까?<br />
디자인 시스템을 사용해도 android, ios의 앱처럼 보이진 않지만 root Widget이여서 시작점을 선택하는 것으로, 기본 UI 설정과 같은 재료들을 선택하는 것<br />
(하지만 Flutter는 구글이 제작했기에 material 앱 스타일이 cuperino 스타일보다 보기 좋다함 😅)</p>

<h2 id="scaffold">scaffold</h2>
<hr />
<p>Flutter는 하나의 개발 규칙이 있는데, 화면이 scaffold를 가져야하는 것<br />
scaffold: 화면의 구성 및 구조에 관한 것들을 가지고 있는 위젯, 화면의 구조를 제공하며,<br />
모바일 앱의 모든 화면은 scaffold가 필요함<br />
scaffold의 기능: navigation bar 구현, bottom tab bar, 화면 중앙 정렬 등</p>

<h2 id="home">home</h2>
<hr />
<p>앱의 home에 있을 때 무엇을 보여줄지 정하는 프로퍼티로 home안의 위젯을 구성하면 됨</p>

<h2 id="구성-요소">구성 요소</h2>
<hr />
<p>클래스에 커서를 올려 놓으면 클래스의 구성이 나오는데, 그것으로 무엇을 할 수 있는지 유추해 볼 수 있음, 자주 사용하도록 하자</p>]]></content><author><name>Mindol</name></author><category term="Flutter" /><category term="Flutter" /><category term="Dart" /><summary type="html"><![CDATA[플러터의 기초 공부]]></summary></entry><entry><title type="html">[jekyll] - markdown파일로 포스팅</title><link href="http://localhost:4000/web/2023/01/26/markdown%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8C%85.html" rel="alternate" type="text/html" title="[jekyll] - markdown파일로 포스팅" /><published>2023-01-26T06:00:01+09:00</published><updated>2023-01-26T06:00:01+09:00</updated><id>http://localhost:4000/web/2023/01/26/markdown%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%ED%8F%AC%EC%8A%A4%ED%8C%85</id><content type="html" xml:base="http://localhost:4000/web/2023/01/26/markdown%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8C%85.html"><![CDATA[<h2 id="markdown이란">Markdown이란?</h2>
<hr />
<p>마크다운(Markdown)은 일반 텍스트 기반의 경량 마크업 언어.<br />
일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며,<br />
일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.<br /></p>

<h2 id="포스팅을-하기-전">포스팅을 하기 전</h2>
<hr />
<p>Mardown을 지원하는 에디터를 준비해야합니다.<br />
저는 Visual Studio Code를 사용중입니다.</p>

<h2 id="_posts">_posts</h2>
<hr />
<p>블로그 디렉토리를 들어가면 대략적으로 이런 형식으로 구성이 되어있습니다.
<img src="/assets/img/jekyll/jekyll_post_1.png" alt="image" width="50%" height="50%" /><br />
포스팅을 하기위해서는 _posts 디렉터리에 markdown파일을 만들어야합니다.<br />
만약 _posts 디렉터리가 존재하지 않을 시 _posts라는 디렉터리를 생성해줍니다.<br />
❗ 모든 포스트 파일은 _posts 디렉터리 내 위치합니다.</p>

<h2 id="markdown-파일-생성">Markdown 파일 생성</h2>
<hr />
<p>마크다운 파일을 생성해줍니다.<br />
❗ 파일 명은 yyyy-mm-dd-포스트 제목.md 형식으로 만들어줍니다.
<img src="/assets/img/jekyll/jekyll_post_2.png" alt="image" width="100%" height="100%" /><br /></p>

<h2 id="머릿말front-matter-작성">머릿말(Front-Matter) 작성</h2>
<hr />
<p>준비했던 에디터로 해당 파일을 열어준 후, 맨 위에 아래처럼 작성해줍니다.</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">포스팅</span><span class="nv"> </span><span class="s">이름"</span>
<span class="na">excerpt</span><span class="pi">:</span> <span class="s2">"</span><span class="s">소개글"</span>
<span class="na">categories</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Category1</span><span class="pi">]</span>
<span class="na">tag</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">tag1</span><span class="pi">,</span> <span class="nv">tag2</span><span class="pi">,</span> <span class="nv">tag3</span><span class="pi">]</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2023-01-26 00:00:00 +0300</span>
<span class="nn">---</span>
</code></pre></div></div>
<p>머릿말은 두개의 <code class="language-plaintext highlighter-rouge">---</code> 사이에 영역을 구분해줘야 한다.<br />
title: 포스트의 제목을 큰 따옴표로 적어 준다. title을 적어주지 않을 시,<br />
생성한 파일의 포스트 제목 부분이 제목으로 업로드 된다.<br />
excerpt: 포스트 목록에 보여지는 간단한 소개글.<br />
<img src="/assets/img/jekyll/jekyll_post_3.png" alt="image" width="20%" height="20%" /><br />
categories: 포스트의 카테고리<br />
tags: 카테고리와의 차이로 카테고리는 sub url이 붙는 페이지가 있지만 태그는 없다,<br />
카테고리보다 좀 더 세부적으로 나눌 수 있다.
date: 포스팅 날짜</p>

<h2 id="포스트-내용-확인">포스트 내용 확인</h2>
<hr />
<p>나는 포스트 내용을 확인할 때 두가지 방법을 사용한다.<br />
첫째로 Visual Studio Code에서 지원하는 Preview기능으로,<br />
마크다운 파일의 내용을 확인할 수 있다.
<img src="/assets/img/jekyll/jekyll_post_4.png" alt="image" width="100%" height="100%" /><br />
에디터의 상단 UI중 빨간 네모 버튼을 눌러주면
<img src="/assets/img/jekyll/jekyll_post_5.png" alt="image" width="50%" height="50%" /><br />
이렇게 마크다운 형식의 파일 내용을 확인할 수 있다.<br />
두번째로 로컬 서버를 열어 블로그에 적용될 모습을 확인하는 방법이다.<br />
cmd로 블로그 디렉터리로 이동 후 <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>명령어를 입력 하면<br />
로컬 환경에서 jekyll 서버를 가동할 수 있다.<br />
url에 <code class="language-plaintext highlighter-rouge">127.0.0.1:4000</code>이나 <code class="language-plaintext highlighter-rouge">localhost:4000</code>을 입력하여 블로그에 접속할 수 있다.<br />
<img src="/assets/img/jekyll/jekyll_post_6.png" alt="image" width="50%" height="50%" /><br /></p>

<h2 id="간단한-markdown-문법">간단한 Markdown 문법</h2>
<hr />
<p><code class="language-plaintext highlighter-rouge">#</code>,<code class="language-plaintext highlighter-rouge">##</code>,<code class="language-plaintext highlighter-rouge">###</code>: HTML의 <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code>,<code class="language-plaintext highlighter-rouge">&lt;h2&gt;</code>,<code class="language-plaintext highlighter-rouge">&lt;h3&gt;</code> 태그와 같다 주로 하나의 소제목이나,<br />
어떠한 글을 강조할 때 사용한다<br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">[text](url)</code>: HTML의 <code class="language-plaintext highlighter-rouge">&lt;a href:"url"&gt;text&lt;/a&gt;</code>와 같은 역할을 한다.<br />
text에 링크를 걸 수 있다.<br />
주로 하이퍼링크나, 파일 다운로드에 사용된다.<br />
ex) <a href="https://hhh57463.github.io">블로그주소</a><br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">![image](이미지 파일 위치)</code>: 이미지를 삽입할 때 사용한다.<br />
나는 블로그 디렉터리 내의 assets파일 내<br />
img디렉터리를 생성하여 이미지를 관리한다.<br />
<code class="language-plaintext highlighter-rouge">![image](이미지 파일){: width="50%" height="50%"}</code><br />
이런식으로 이미지의 크기를 조절할 수 있다. (위의 예시는 이미지 크기 50%)<br /><br />
<code class="language-plaintext highlighter-rouge">+ 내용</code>, <code class="language-plaintext highlighter-rouge">- 내용</code>: HTML의 <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> 태그와 같은 역할, 주로 리스트를 표시할 때 사용한다.<br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>: 줄바꿈 태그, Enter키로 2칸의 공백을 만들면 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>로 간주된다.<br /><br /></p>

<p>💡 마크다운 내에서는 이모지를 사용할 수 있으며, HTML의 태그를 사용할 수 있다.<br />
나는 주로 <a href="https://www.emojiengine.com/ko/">링크</a>에서 이모지를 가져와 사용한다.<br /></p>]]></content><author><name>Mindol</name></author><category term="web" /><category term="jekyll" /><category term="web" /><category term="markdown" /><category term="github" /><summary type="html"><![CDATA[마크다운파일을 이용한 블로그 포스팅]]></summary></entry><entry><title type="html">ios::sync_with_stdio(false), cin.tie(0)</title><link href="http://localhost:4000/study/2023/01/12/%EA%B3%B5%EB%B6%80-%EB%B0%B1%EC%A4%80-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC-%ED%95%B4%EA%B2%B0.html" rel="alternate" type="text/html" title="ios::sync_with_stdio(false), cin.tie(0)" /><published>2023-01-12T06:00:01+09:00</published><updated>2023-01-12T06:00:01+09:00</updated><id>http://localhost:4000/study/2023/01/12/%5B%EA%B3%B5%EB%B6%80%5D%EB%B0%B1%EC%A4%80%20%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC%20%ED%95%B4%EA%B2%B0</id><content type="html" xml:base="http://localhost:4000/study/2023/01/12/%EA%B3%B5%EB%B6%80-%EB%B0%B1%EC%A4%80-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC-%ED%95%B4%EA%B2%B0.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>C++ 공부중에 발견한 코드</p>

<h1 id="시간초과">시간초과</h1>
<hr />
<p>알고리즘 공부중에 코드마다</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</code></pre></div></div>
<p>가 있는 것을 보았는데, 궁금해서 검색해봤다.<br /><br /></p>

<p>보통 백준, 프로그래머스처럼 온라인 저지 사이트에서<br />
C++을 이용하여 알고리즘 문제를 풀 때<br />
시간초과 방지를 위해 사용한다.<br /><br /></p>

<p>C++에서는 기존 입출력으로 cin, cout을 사용하는데,<br />
시간초과가 발생하는 경우가 있다.<br /><br />
그럴때 사용하는데, 이유로 입출력 양이 굉장히 많아지면 입출력하는데 소모시간이 많아져 시간초과가 발생한다.<br />
📚 위의 코드를 사용하면 입출력 속도가 빨라진다 한다.</p>
<h2 id="iossync_with_stdiofalse">ios::sync_with_stdio(false)</h2>
<hr />
<h3 id="c와-c-표준-stream의-동기화를-비활성화하는-코드">C와 C++ 표준 stream의 동기화를 비활성화하는 코드<br /><br /></h3>

<p>동기화가 활성화 되어있으면 C스타일과 C++스타일의 입출력을 혼합해도 문제가 없다<br />
printf, scanf와 cout, cin을 같이 사용해도 문제가 없는 것이다.<br /><br /></p>

<p>하지만 <code class="language-plaintext highlighter-rouge">ios::sync_with_stdio(false)</code>를 작성하면 C스타일과 C++스타일을 혼합하여 사용할 수 없는 대신,<br /></p>
<h3 id="c스타일-코드만-사용하면-기존의-동기화-과정에-필요했던-시간이-절약되어-입출력-속도가-빨라지는-효과가-있다">C++스타일 코드만 사용하면 기존의 동기화 과정에 필요했던 시간이 절약되어 입출력 속도가 빨라지는 효과가 있다.<br /><br /></h3>

<p>알고리즘 문제를 풀 때는 동기화는 필요없고 시간 절약이 우선이니<br />
<code class="language-plaintext highlighter-rouge">ios::sync_with_stdio(false)</code>를 사용하여 입출력 시간을 절약하는 것이다<br /><br /></p>

<p>하지만 동기화된 C++버퍼의 경우 thread-safe하기 때문에 모든 IO의 순서가 예상한 것과 정확히 일치함을 보장할 수 있지만<br />
<code class="language-plaintext highlighter-rouge">ios::sync_with_stdio(false);</code>를 사용하면 동기화가 비활성화 됐기 때문에 멀티 쓰레드 환경에서는 출력 순서를 보장할 수 없다<br />
(thread-safe는 운영체제에서 mutex나 세마포어 등으로 동시 접근을 막는 것과 같이, 여러 쓰레드가 동시 접근해도 안전하다는 의미)<br /><br /></p>

<p>그리고 C스타일의 printf, scanf, putchar, getchar 등을 같이 사용하면 안된다.</p>
<h2 id="cintie0">cin.tie(0)</h2>
<hr />
<h3 id="cin과-cout의-묶음을-풀어준다">cin과 cout의 묶음을 풀어준다.<br /><br /></h3>

<p>아래의 코드가 있다고 생각해보면</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"이름을 입력해 주세요 </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">name</span><span class="p">;</span>
</code></pre></div></div>
<p>평소에는 cin과 cout이 묶여 있어
“이름을 입력해 주세요 \n”가 먼저 출력된 후 이름을 입력할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">cin.tie(0)</code>나 <code class="language-plaintext highlighter-rouge">cin.tie(null)</code> 코드를 추가해 주면<br />
“이름을 입력해 주세요 \n”가 출력되기 전에 이름을 입력할  수 있다.<br /></p>
<h3 id="내부적으로-cin과-cout을-묶어주는-과정을-수행하지-않기-때문에-시간이-절약된다">내부적으로 cin과 cout을 묶어주는 과정을 수행하지 않기 때문에 시간이 절약된다.<br /><br /></h3>

<p>물론 이름을 입력해달라는 문구가 나오기 전에 입력을 할 수 있는 것은 이상하지만<br />
알고리즘 문제를 풀 때는 크게 상관이 없고,<br />
입출력 시간을 절약할 수 있기 때문에 <code class="language-plaintext highlighter-rouge">cin.tie(0)</code>을 많이 사용한다.</p>]]></content><author><name>Mindol</name></author><category term="Study" /><category term="study" /><category term="cpp" /><summary type="html"><![CDATA[백준 C++ 시간초과 해결]]></summary></entry><entry><title type="html">Dart 기초 - 클래스</title><link href="http://localhost:4000/dart/2023/01/10/Dart-%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4.html" rel="alternate" type="text/html" title="Dart 기초 - 클래스" /><published>2023-01-10T06:00:01+09:00</published><updated>2023-01-10T06:00:01+09:00</updated><id>http://localhost:4000/dart/2023/01/10/Dart%20%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4</id><content type="html" xml:base="http://localhost:4000/dart/2023/01/10/Dart-%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>Flutter를 공부하기 위한 Dart 공부</p>

<h1 id="클래스">클래스</h1>
<hr />
<p>flutter는 클래스로 이루어져있음</p>

<h2 id="클래스-선언">클래스 선언</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'민돌'</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="객체-생성">객체 생성</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">player1</span> <span class="o">=</span> <span class="n">Player</span><span class="p">();</span>
  <span class="n">Player</span> <span class="n">player2</span> <span class="o">=</span> <span class="n">Player</span><span class="p">();</span>

  <span class="n">player1</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'mindol'</span><span class="p">;</span>
  <span class="n">player2</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'민돌2'</span><span class="p">;</span>

  <span class="n">print</span><span class="p">(</span><span class="n">player1</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">print</span><span class="p">(</span><span class="n">player2</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">player1</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
  <span class="n">player2</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
<span class="c1">// 결과</span>
<span class="n">mindol</span>
<span class="err">민돌</span><span class="mi">2</span>
<span class="n">Hi</span> <span class="n">my</span> <span class="n">name</span> <span class="k">is</span> <span class="n">mindol</span>
<span class="n">Hi</span> <span class="n">my</span> <span class="n">name</span> <span class="k">is</span> <span class="err">민돌</span><span class="mi">2</span>
<span class="n">Exited</span>
</code></pre></div></div>

<h2 id="생성자">생성자</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kd">late</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kd">late</span> <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">(</span><span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">xp</span><span class="p">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="n">xp</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">player1</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="s">'mindol'</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
  <span class="n">Player</span> <span class="n">player2</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="s">'민돌2'</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>

  <span class="n">print</span><span class="p">(</span><span class="n">player1</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">print</span><span class="p">(</span><span class="n">player2</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">player1</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
  <span class="n">player2</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>기본 생성자 코드는 이렇지만 dart에서는 더 나은 방법을 추천</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">);</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>생성자의 매개변수를 this로 지정해주면 선언 순서에 따른 변수 지정이 가능<br />
(첫번째 매개변수는 name으로, 두번째 매개변수는 xp로)</p>

<h2 id="named-constructor-parameters">Named Constructor Parameters</h2>
<hr />
<p>함수에서 Named Parameter를 지정했던 것처럼 class에서도 Named Parameter를 지정할 수 있음</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">player1</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'mindol'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">100</span><span class="p">);</span>
  <span class="n">Player</span> <span class="n">player2</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌2'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>또다른 생성자 방법</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">,</span> <span class="n">age</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="p">,});</span>

  <span class="n">Player</span><span class="o">.</span><span class="na">CreateBluePlayer</span><span class="p">({</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,})</span> <span class="o">:</span> 
	<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'blue'</span><span class="p">;</span>

  <span class="n">Player</span><span class="o">.</span><span class="na">CreateRedPlayer</span><span class="p">({</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,})</span> <span class="o">:</span> 
	<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'red'</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">BluePlayer</span> <span class="o">=</span> <span class="n">Player</span><span class="o">.</span><span class="na">CreateBluePlayer</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">25</span><span class="p">);</span>
  <span class="n">Player</span> <span class="n">RedPlayer</span> <span class="o">=</span> <span class="n">Player</span><span class="o">.</span><span class="na">CreateBluePlayer</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌2'</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">25</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="클래스-프로퍼티에-jsondata-셋팅">클래스 프로퍼티에 JsonData 셋팅</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span> <span class="n">playerJson</span><span class="p">)</span> <span class="o">:</span> 
	<span class="n">name</span> <span class="o">=</span> <span class="n">playerJson</span><span class="p">[</span><span class="s">'name'</span><span class="p">],</span> <span class="n">xp</span> <span class="o">=</span> <span class="n">playerJson</span><span class="p">[</span><span class="s">'xp'</span><span class="p">],</span> <span class="n">team</span> <span class="o">=</span> <span class="n">playerJson</span><span class="p">[</span><span class="s">'team'</span><span class="p">];</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">apiData</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="s">"name"</span> <span class="o">:</span> <span class="s">"민돌"</span><span class="p">,</span>
      <span class="s">"team"</span> <span class="o">:</span> <span class="s">"red"</span><span class="p">,</span>
      <span class="s">"xp"</span> <span class="o">:</span> <span class="mi">0</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="s">"name"</span> <span class="o">:</span> <span class="s">"민돌2"</span><span class="p">,</span>
      <span class="s">"team"</span> <span class="o">:</span> <span class="s">"blue"</span><span class="p">,</span>
      <span class="s">"xp"</span> <span class="o">:</span> <span class="mi">0</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="s">"name"</span> <span class="o">:</span> <span class="s">"민돌3"</span><span class="p">,</span>
      <span class="s">"team"</span> <span class="o">:</span> <span class="s">"green"</span><span class="p">,</span>
      <span class="s">"xp"</span> <span class="o">:</span> <span class="mi">0</span>
    <span class="p">}</span>
  <span class="p">];</span>

	<span class="c1">// foreach문 List.forEach((변수){코드});</span>
  <span class="n">apiData</span><span class="o">.</span><span class="na">forEach</span><span class="p">((</span><span class="n">JsonData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="n">player</span> <span class="o">=</span> <span class="n">Player</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">JsonData</span><span class="p">);</span>
    <span class="n">player</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="cascade-notation">Cascade Notation</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">mindol</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1200</span><span class="p">,</span> <span class="nl">team:</span> <span class="s">'read'</span><span class="p">);</span>
  <span class="n">mindol</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'mindol'</span><span class="p">;</span>
  <span class="n">mindol</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">120000</span><span class="p">;</span>
  <span class="n">mindol</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'blue'</span><span class="p">;</span>
	<span class="n">mindol</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>는</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">mindol</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1200</span><span class="p">,</span> <span class="nl">team:</span> <span class="s">'read'</span><span class="p">)</span>
  <span class="p">.</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'mindol'</span>
  <span class="p">.</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">120000</span>
  <span class="p">.</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'blue'</span>
	<span class="p">.</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>와 같은 역할이다<br />
💡 ..name,  ..xp, ..team의 맨 앞에 붙는 .은 객체를 가르킴</p>

<h3 id="enum">Enum</h3>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">enum</span> <span class="n">Team</span> <span class="p">{</span> <span class="n">red</span><span class="p">,</span> <span class="n">blue</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">mindol</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1200</span><span class="p">,</span> <span class="nl">team:</span> <span class="n">Team</span><span class="o">.</span><span class="na">red</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="추상화-메소드-abstract-method">추상화 메소드 (abstract method)</h2>
<hr />
<p>추상화 클래스 특징<br />
추상화 클래스로는 객체를 생성할 수 없음<br />
추상화 클래스는 상속 받은 클래스들이 직접 구현해야하는 메소드를 모아 놓은 일종의 블루프린트<br />
특정 메소드를 구현하도록 강제함<br />
각 클래스들이 같은 함수에 다른 내용을 가질 수 있음</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Human</span><span class="p">{</span>     <span class="c1">// 추상 클래스 선언</span>
  <span class="kt">void</span> <span class="n">walk</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span> <span class="kd">extends</span> <span class="n">Human</span><span class="p">{</span>   <span class="c1">// 추상 클래스 상속</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">walk</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"I'm Walking"</span><span class="p">);</span>    <span class="c1">// 추상 클래스 메소드 구현</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coach</span> <span class="kd">extends</span> <span class="n">Human</span><span class="p">{</span>
  <span class="kt">void</span> <span class="n">walk</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"coach is walk"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="상속">상속</h2>
<hr />
<p>상속받은 클래스(자식클래스)는 부모 클래스 내의 모든 내용을 가져옴</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Human</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="n">Human</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">});</span>
  <span class="kt">void</span> <span class="n">sayHello</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">enum</span> <span class="n">Team</span><span class="p">{</span><span class="n">blue</span><span class="p">,</span> <span class="n">red</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span> <span class="kd">extends</span> <span class="n">Human</span><span class="p">{</span>
  <span class="kd">final</span> <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>
  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="p">.</span> <span class="n">team</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">name:</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">player</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">team:</span> <span class="n">Team</span><span class="o">.</span><span class="na">red</span><span class="p">,</span> <span class="nl">name:</span> <span class="s">'mindol'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>💡 super 키워드를 통해 부모 클래스와 상호작용이 가능<br />
super() ← 부모 클래스 생성자<br />
부모 클래스의 메소드를 수정하고 싶을 경우 @override 키워드 사용</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Human</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="n">Human</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">});</span>
  <span class="kt">void</span> <span class="n">sayHello</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">enum</span> <span class="n">Team</span><span class="p">{</span><span class="n">blue</span><span class="p">,</span> <span class="n">red</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span> <span class="kd">extends</span> <span class="n">Human</span><span class="p">{</span>
  <span class="kd">final</span> <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>
  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="p">.</span> <span class="n">team</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">name:</span> <span class="n">name</span><span class="p">);</span>
  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">sayHello</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">sayHello</span><span class="p">();</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"and I play for </span><span class="si">$team</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="mixin-클래스">Mixin 클래스</h2>
<hr />
<p>Mixin : 생성자가 없는 클래스, 클래스에 프로퍼티들을 추가하거나 할 때 주로 사용<br />
(다른 클래스의 프로퍼티와 메소드를 그냥 긁어오는 것 뿐, 상속과는 다른 개념(부모 클래스가 되지 않음)<br />
여러 클래스에 사용이 가능함<br />
생성자가 없어야 함</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Strong</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">double</span> <span class="n">strengthLevel</span> <span class="o">=</span> <span class="mf">1500.99</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">QuickRunner</span><span class="p">{</span>
  <span class="kt">void</span> <span class="n">runQuick</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"ruuuuuun"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">enum</span> <span class="n">Team</span><span class="p">{</span><span class="n">blue</span><span class="p">,</span> <span class="n">red</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span> <span class="k">with</span> <span class="n">Strong</span><span class="p">,</span> <span class="n">QuickRunner</span><span class="p">{</span>
  <span class="kd">final</span> <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>
  <span class="n">Player</span><span class="p">({</span> <span class="kd">required</span> <span class="k">this</span><span class="p">.</span> <span class="n">team</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Horse</span> <span class="k">with</span> <span class="n">Strong</span><span class="p">,</span> <span class="n">QuickRunner</span><span class="p">{}</span>
</code></pre></div></div>]]></content><author><name>Mindol</name></author><category term="Dart" /><category term="Dart" /><summary type="html"><![CDATA[Dart공부 - 클래스]]></summary></entry><entry><title type="html">Dart 기초 - 함수</title><link href="http://localhost:4000/dart/2023/01/08/Dart-%EA%B8%B0%EC%B4%88-%ED%95%A8%EC%88%98.html" rel="alternate" type="text/html" title="Dart 기초 - 함수" /><published>2023-01-08T06:00:01+09:00</published><updated>2023-01-08T06:00:01+09:00</updated><id>http://localhost:4000/dart/2023/01/08/Dart%20%EA%B8%B0%EC%B4%88-%ED%95%A8%EC%88%98</id><content type="html" xml:base="http://localhost:4000/dart/2023/01/08/Dart-%EA%B8%B0%EC%B4%88-%ED%95%A8%EC%88%98.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>Flutter를 공부하기 위한 Dart 공부</p>

<h1 id="함수">함수</h1>
<hr />
<p>dart의 시작은 main.dart&gt;main()에서 시작됨 (필수 요소)<br />
dart의 출력문 print(’문자열’);<br />
함수 선언은 다른 언어와 유사<br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">Hello</span><span class="p">({</span><span class="kt">String</span><span class="o">?</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span><span class="o">?</span> <span class="n">age</span><span class="p">,</span> <span class="kt">String</span><span class="o">?</span> <span class="n">country</span><span class="p">})</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="s">"Hello </span><span class="si">$name</span><span class="s"> you are </span><span class="si">$age</span><span class="s"> and from </span><span class="si">$country</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>만약 코드가 한줄 이면</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">Hello</span><span class="p">({</span><span class="kt">String</span><span class="o">?</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span><span class="o">?</span> <span class="n">age</span><span class="p">,</span> <span class="kt">String</span><span class="o">?</span> <span class="n">country</span><span class="p">})</span> <span class="o">=</span><span class="p">&gt;</span> 
<span class="s">"Hello </span><span class="si">$name</span><span class="s"> you are </span><span class="si">$age</span><span class="s"> and from </span><span class="si">$country</span><span class="s">"</span><span class="p">;</span>
</code></pre></div></div>
<p>이렇게 줄일 수 있음<br />
일반적으로 매개변수 있는 함수를 사용할 때는 Named Parameter를 사용하는 것을 지향(평소에 사용했던 매개변수 선언 순서에 맞는 호출 방법은 Positional parameter)<br />
나중에 코드를 볼 때 이해가 쉽지 않기 때문에<br />
특히 해당 함수가 같은 파일 내에 있지 않으면 어려움</p>

<h3 id="named-parameters">Named Parameters</h3>
<hr />
<p>함수 호출 시 매개변수 순서와 상관없이 변수에 지정해 주는 것 (함수 선언시 매개변수를 {}로 감싸야 함</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">Hello</span><span class="p">({</span><span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,</span> <span class="kt">String</span> <span class="n">country</span><span class="p">})</span> <span class="o">=</span><span class="p">&gt;</span> <span class="s">"Hello </span><span class="si">$name</span><span class="s"> you are </span><span class="si">$age</span><span class="s"> and from </span><span class="si">$country</span><span class="s">"</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">Hello</span><span class="p">(</span><span class="nl">age:</span> <span class="mi">25</span><span class="p">,</span> <span class="nl">country:</span> <span class="s">"Korea"</span><span class="p">,</span> <span class="nl">name:</span> <span class="s">"Mindol"</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>
<p>❓ 하지만 이렇게 하면 null safety 에러 발생
고치는 방법은 세가지</p>
<ol>
  <li>디폴트 매개변수로 지정</li>
  <li>required 키워드 사용 (null 값이 아니다 라는 것을 알려주는 키워드)</li>
  <li>null safety 사용 (자료형? 변수명)</li>
</ol>

<p>디폴트 매개변수로 지정</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">Hello</span><span class="p">({</span><span class="kt">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"who"</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="kt">String</span> <span class="n">country</span> <span class="o">=</span> <span class="s">"usa"</span><span class="p">})</span> <span class="o">=</span><span class="p">&gt;</span>
    <span class="s">"Hello </span><span class="si">$name</span><span class="s"> you are </span><span class="si">$age</span><span class="s"> and from </span><span class="si">$country</span><span class="s">"</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">Hello</span><span class="p">());</span>
  <span class="n">print</span><span class="p">(</span><span class="n">Hello</span><span class="p">(</span><span class="nl">age:</span> <span class="mi">25</span><span class="p">,</span> <span class="nl">country:</span> <span class="s">"Korea"</span><span class="p">,</span> <span class="nl">name:</span> <span class="s">"Mindol"</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// 결과</span>
<span class="n">Hello</span> <span class="n">who</span> <span class="n">you</span> <span class="n">are</span> <span class="mi">10</span> <span class="n">and</span> <span class="n">from</span> <span class="n">usa</span>
<span class="n">Hello</span> <span class="n">Mindol</span> <span class="n">you</span> <span class="n">are</span> <span class="mi">25</span> <span class="n">and</span> <span class="n">from</span> <span class="n">Korea</span>
<span class="n">Exited</span>
</code></pre></div></div>

<p>required 키워드 사용</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">Hello</span><span class="p">(</span>
        <span class="p">{</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">String</span> <span class="n">country</span><span class="p">})</span> <span class="o">=</span><span class="p">&gt;</span>
    <span class="s">"Hello </span><span class="si">$name</span><span class="s"> you are </span><span class="si">$age</span><span class="s"> and from </span><span class="si">$country</span><span class="s">"</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">Hello</span><span class="p">(</span><span class="nl">age:</span> <span class="mi">25</span><span class="p">,</span> <span class="nl">country:</span> <span class="s">"Korea"</span><span class="p">,</span> <span class="nl">name:</span> <span class="s">"Mindol"</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>null safety 사용</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">Hello</span><span class="p">({</span><span class="kt">String</span><span class="o">?</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span><span class="o">?</span> <span class="n">age</span><span class="p">,</span> <span class="kt">String</span><span class="o">?</span> <span class="n">country</span><span class="p">})</span> <span class="o">=</span><span class="p">&gt;</span> <span class="s">"Hello </span><span class="si">$name</span><span class="s"> you are </span><span class="si">$age</span><span class="s"> and from </span><span class="si">$country</span><span class="s">"</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">Hello</span><span class="p">(</span><span class="nl">country:</span> <span class="s">"Korea"</span><span class="p">,</span> <span class="nl">name:</span> <span class="s">"Mindol"</span><span class="p">));</span>
<span class="p">}</span>
<span class="c1">// 결과</span>
<span class="n">Hello</span> <span class="n">Mindol</span> <span class="n">you</span> <span class="n">are</span> <span class="kc">null</span> <span class="n">and</span> <span class="n">from</span> <span class="n">Korea</span>
<span class="n">Exited</span>
</code></pre></div></div>

<h2 id="optional">Optional</h2>
<hr />
<p>named parameter를 적용하지 않고 특정 매개변수를 required하지 않게 하는 방법</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">Hello</span><span class="p">(</span><span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,</span> <span class="p">[</span><span class="kt">String</span><span class="o">?</span> <span class="n">country</span> <span class="o">=</span> <span class="s">'Korea'</span><span class="p">])</span> <span class="o">=</span><span class="p">&gt;</span>
    <span class="s">"Hello </span><span class="si">$name</span><span class="s"> you are </span><span class="si">$age</span><span class="s"> and from </span><span class="si">$country</span><span class="s">"</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">Hello</span><span class="p">(</span><span class="s">"Mindol"</span><span class="p">,</span> <span class="mi">25</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="삼항-연산자">삼항 연산자</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">String</span> <span class="nf">capitalizeName</span><span class="p">(</span><span class="kt">String</span><span class="o">?</span> <span class="n">name</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span>
    <span class="n">name</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">name</span><span class="o">.</span><span class="na">toUpperCase</span><span class="p">()</span> <span class="o">:</span> <span class="s">'NULL'</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">capitalizeName</span><span class="p">(</span><span class="kc">null</span><span class="p">));</span>
  <span class="n">print</span><span class="p">(</span><span class="n">capitalizeName</span><span class="p">(</span><span class="s">"mindol"</span><span class="p">));</span>
<span class="p">}</span>
<span class="c1">// 결과</span>
<span class="n">NULL</span>
<span class="n">MINDOL</span>
<span class="n">Exited</span>

<span class="kt">String</span> <span class="nf">capitalizeName</span><span class="p">(</span><span class="kt">String</span><span class="o">?</span> <span class="n">name</span><span class="p">)</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">name</span><span class="o">?.</span><span class="na">toUpperCase</span><span class="p">()</span> <span class="o">??</span> <span class="s">'NULL'</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">print</span><span class="p">(</span><span class="n">capitalizeName</span><span class="p">(</span><span class="kc">null</span><span class="p">));</span>
  <span class="n">print</span><span class="p">(</span><span class="n">capitalizeName</span><span class="p">(</span><span class="s">"mindol"</span><span class="p">));</span>
<span class="p">}</span>
<span class="c1">// 결과</span>
<span class="n">NULL</span>
<span class="n">MINDOL</span>
<span class="n">Exited</span>
</code></pre></div></div>
<p>좌항 ?? 우항<br />
좌항이 null이면 우항을 반환, 좌항이 null이 아니면 좌항을 반환<br />
변수명 ??= 값 : 만약 변수가 null이면 값을 적용</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">String</span><span class="o">?</span> <span class="n">name</span><span class="p">;</span>
  <span class="n">name</span> <span class="o">??=</span> <span class="s">'mindol'</span><span class="p">;</span>
  <span class="n">name</span> <span class="o">??=</span> <span class="s">'Seok'</span><span class="p">;</span>
  <span class="n">print</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 결과</span>
<span class="o">:</span> <span class="nl">Warning:</span> <span class="n">Operand</span> <span class="n">of</span> <span class="kc">null</span><span class="o">-</span><span class="n">aware</span> <span class="n">operation</span> <span class="s">'??='</span> <span class="n">has</span> <span class="n">type</span> <span class="s">'String'</span> <span class="n">which</span> <span class="n">excludes</span> <span class="kc">null</span><span class="p">.</span>
<span class="n">main</span><span class="o">.</span><span class="na">dart</span><span class="o">:</span><span class="mi">4</span>
  <span class="n">name</span> <span class="o">??=</span> <span class="s">'Seok'</span><span class="p">;</span>

  <span class="o">^</span>
<span class="n">mindol</span>
<span class="n">Exited</span>
</code></pre></div></div>
<p>❓ 위의 경고는 3번째 줄 이후부터는 null일리 없다 라는 경고</p>]]></content><author><name>Mindol</name></author><category term="Dart" /><category term="Dart" /><summary type="html"><![CDATA[Dart공부 - 함수]]></summary></entry><entry><title type="html">Dart 기초 - 변수</title><link href="http://localhost:4000/dart/2023/01/07/Dart-%EA%B8%B0%EC%B4%88-%EB%B3%80%EC%88%98.html" rel="alternate" type="text/html" title="Dart 기초 - 변수" /><published>2023-01-07T06:00:01+09:00</published><updated>2023-01-07T06:00:01+09:00</updated><id>http://localhost:4000/dart/2023/01/07/Dart%20%EA%B8%B0%EC%B4%88-%EB%B3%80%EC%88%98</id><content type="html" xml:base="http://localhost:4000/dart/2023/01/07/Dart-%EA%B8%B0%EC%B4%88-%EB%B3%80%EC%88%98.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>Flutter를 공부하기 위한 Dart 공부</p>

<h1 id="변수">변수</h1>
<hr />
<p>변수
var 변수명 = 값;    값에 맞는 자료형에 맞게 셋팅<br />
자료형 변수명 = 값;  자료형에 맞는 값을 넣어야함<br />
dynamic 변수명;, var 변수명;  여러 타입을 가질 수 있는 변수 선언 추천하지 않지만 가끔 사용 됨</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kd">dynamic</span> <span class="n">name</span><span class="p">;</span>
	<span class="n">name</span> <span class="o">=</span> <span class="s">'민돌'</span><span class="p">;</span>
  	<span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="k">is</span> <span class="kt">String</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">name</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1">// dynamic을 사용할 때에는 타입을 검사하고 사용하는 것을 습관화 하기</span>
</code></pre></div></div>
<p>var : 관습적으로 함수나 메소드 내부에서 지역 변수를 선언할 때에 사용 값을 수정해도 타입은 유지되야함<br />
자료형 지정 : class에서 변수나 property를 선언할 때 타입 지정<br />
null safety : 개발자가 null 값을 참조할 수 없도록 하는 것<br />
일반적으로, 자료형 변수 = null; 은 불가능한 문법이지만<br />
자료형? 변수;  변수에 자료형에 맞는 값과 null이 들어갈 수 있게 함<br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">String</span><span class="o">?</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'민돌'</span><span class="p">;</span>
	<span class="n">name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  	<span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">name</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>는</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">String</span><span class="o">?</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'민돌'</span><span class="p">;</span>
	<span class="n">name</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  	<span class="n">name</span><span class="o">?.</span><span class="na">isNotEmpty</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>로 줄여 쓸수 있다</p>

<h2 id="final">final</h2>
<hr />
<p>변수를 상수로 만들어줌</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="n">name</span> <span class="o">=</span> <span class="err">‘민돌’</span><span class="p">;</span>
<span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span> <span class="o">=</span> <span class="err">‘민돌’</span><span class="p">;</span>
</code></pre></div></div>
<p>name 변수는 수정 불가능</p>

<h2 id="late">late</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kd">late</span> <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
	<span class="n">name</span> <span class="o">=</span> <span class="s">'민돌'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>late는 변수를 먼저 만든 후 데이터를 나중에 한번만 넣을 수 있게 함 (수정 불가, 값을 넣기전에 접근 불가능)</p>

<h2 id="const">const</h2>
<hr />
<p>compile-time constant<br />
컴파일 전에 값을 알고 있는 변수를 만드는 법 특정 값을 알고 있을 때 (#define 같음 잘모르겠음)</p>

<h2 id="list">list</h2>
<hr />
<p>list 선언법</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
<span class="c1">// 여러 자료형이 들어갈 수 있음</span>
<span class="kt">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
<span class="c1">// 정수만 들어갈 수 있음</span>
<span class="c1">// list에 요소 추가 : 리스트명.add(값);</span>
</code></pre></div></div>
<p>list의 마지막 요소 가져오기 : 리스트명.last<br />
visual code에서 리스트의 요소를 ,로 끝내면 저절로 여러줄로 포매팅<br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span>
<span class="mi">1</span><span class="p">,</span>
<span class="mi">2</span><span class="p">,</span>
<span class="mi">3</span><span class="p">,</span>
<span class="mi">4</span><span class="p">,</span>
<span class="mi">5</span><span class="p">,</span>
<span class="p">];</span>
</code></pre></div></div>
<p>list의 collecting if 기능 (만약 로그인 했을때 추가해야할 경우 등 유용)</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span>
<span class="mi">1</span><span class="p">,</span>
<span class="mi">2</span><span class="p">,</span>
<span class="mi">3</span><span class="p">,</span>
<span class="mi">4</span><span class="p">,</span>
<span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="mi">5</span><span class="p">,</span>                       <span class="c1">// 만약 조건문이 참이면 5를 추가</span>
<span class="p">];</span>

<span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">num_list</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>               <span class="c1">// 위와 같은 역할</span>
<span class="p">}</span>
</code></pre></div></div>
<p>list의 collecting for 기능</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">num2_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">];</span>
<span class="kt">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span>
<span class="mi">1</span><span class="p">,</span>
<span class="mi">2</span><span class="p">,</span>
<span class="mi">3</span><span class="p">,</span>
<span class="mi">4</span><span class="p">,</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="n">i</span> <span class="k">in</span> <span class="n">num2_list</span><span class="p">)</span> <span class="n">$i</span>                       <span class="c1">// 요소 i를 추가</span>
<span class="p">];</span>
<span class="k">if</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">num_list</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>               <span class="c1">// 위와 같은 역할</span>
<span class="p">}</span>
</code></pre></div></div>
<p>리스트 반전</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
  <span class="kt">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list_R</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">reversed</span><span class="o">.</span><span class="na">toList</span><span class="p">();</span>      
<span class="c1">// reversed를 사용하면 자료형이 List가 아닌 Iterable이 되어 List형식으로 변환해줘야함</span>
  <span class="n">print</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
  <span class="n">print</span><span class="p">(</span><span class="n">list_R</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="문자열-포매팅">문자열 포매팅</h2>
<hr />
<p>문자열에 변수 넣기</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'민돌'</span><span class="p">;</span>
<span class="kd">var</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
<span class="kd">var</span> <span class="n">hi</span> <span class="o">=</span> <span class="s">"hi my name is </span><span class="si">$name</span><span class="s">, nice to meet you and I'm </span><span class="si">${age+15}</span><span class="s">"</span><span class="p">;</span>
<span class="c1">// 일반 변수 출력시 $변수 계산 후 출력시 ${계산}</span>
<span class="n">print</span><span class="p">(</span><span class="n">hi</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="map">Map</h2>
<hr />
<p>Map : dictionary와 같음 (Map&lt;key, value&gt;)</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s">'name'</span> <span class="o">:</span> <span class="s">'민돌'</span><span class="p">,</span>
	<span class="s">'age'</span> <span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
	<span class="s">'marry'</span> <span class="o">:</span> <span class="kc">false</span>
<span class="p">};</span>

<span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">Object</span><span class="p">&gt;</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s">'name'</span> <span class="o">:</span> <span class="s">'민돌'</span><span class="p">,</span>
	<span class="s">'age'</span> <span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
	<span class="s">'marry'</span> <span class="o">:</span> <span class="kc">false</span>
<span class="p">}</span>

<span class="n">print</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="s">'name'</span><span class="p">]);</span>
</code></pre></div></div>

<h2 id="set">Set</h2>
<hr />
<p>Set : python의 튜플과 같음</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Set</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">};</span>
<span class="c1">// Set은 List와 유사하지만 요소들이 고유함 (하나씩만 존재함)</span>
<span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="n">print</span><span class="p">(</span><span class="n">nums</span><span class="p">);</span>
<span class="c1">// 출력결과는 1,2,3,4,5</span>
</code></pre></div></div>
<p>요소가 하나만 있을때는 Set을 사용하고 중복이 가능하면 List 사용</p>

<h2 id="typedef">typedef</h2>
<hr />
<p>변수에 alias를 지정 (별명 지정)</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typedef</span> <span class="n">JungSoo</span> <span class="o">=</span> <span class="kt">int</span><span class="p">;</span>
<span class="kd">typedef</span> <span class="n">UserInfo</span> <span class="o">=</span> <span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">&gt;;</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">JungSoo</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">print</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Mindol</name></author><category term="Dart" /><category term="Dart" /><summary type="html"><![CDATA[Dart공부 - 변수]]></summary></entry><entry><title type="html">[jekyll] - jekyll 블로그 만들기</title><link href="http://localhost:4000/web/2022/12/30/jekyll%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0.html" rel="alternate" type="text/html" title="[jekyll] - jekyll 블로그 만들기" /><published>2022-12-30T06:00:01+09:00</published><updated>2022-12-30T06:00:01+09:00</updated><id>http://localhost:4000/web/2022/12/30/jekyll%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/web/2022/12/30/jekyll%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0.html"><![CDATA[<h2 id="ruby-설치">ruby 설치</h2>
<hr />
<p><img src="/assets/img/jekyll/ruby_home.png" alt="image" width="100%" height="100%" /><br />
<a href="https://rubyinstaller.org/downloads//">ruby</a>에 접속합니다.</p>

<p><img src="/assets/img/jekyll/ruby_down.png" alt="image" width="100%" height="100%" /><br />
Devkit의 2.4이상의 버전을 다운 받아 설치해줍니다.<br /></p>

<p><img src="/assets/img/jekyll/ruby_install_1.png" alt="image" width="100%" height="100%" /><br />
Enter를 입력하여 설치.<br /><br />
cmd에</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby <span class="nt">-v</span>
</code></pre></div></div>
<p>입력하여 설치가 완료되었는지 확인해줍니다.<br /></p>

<h2 id="jekyll-설치">jekyll 설치</h2>
<hr />
<p><img src="/assets/img/jekyll/jekyll_install.jpg" alt="image" width="100%" height="100%" /><br />
cmd에</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>bundle jekyll
</code></pre></div></div>
<p>입력하여 jekyll을 설치해줍니다.<br /></p>

<h2 id="jekyll-theme-설치">jekyll theme 설치</h2>
<hr />
<p><img src="/assets/img/jekyll/jekyll_theme_1.png" alt="image" width="100%" height="100%" /><br />
<a href="http://jekyllthemes.org/">링크</a>에 접속하여 테마를 선텍합니다.<br /></p>

<p><img src="/assets/img/jekyll/jekyll_theme_2.png" alt="image" width="100%" height="100%" /><br />
현재 이 블로그는 <a href="http://jekyllthemes.org/themes/hamilton/">Hamilton</a> 테마를 사용하고 있습니다.<br />
Download 버튼을 눌러 테마를 다운로드 후, 압축을 풀어줍니다.<br /></p>

<p>cmd에</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div>
<p>를 입력하여 bundle 설치 후<br />
cmd로 다운받은 디렉토리에 접속하여</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>
<p>를 입력하여 줍니다.<br /></p>

<h2 id="깃허브-repository-생성">깃허브 repository 생성</h2>
<hr />
<p><img src="/assets/img/jekyll/localhost.png" alt="image" width="100%" height="100%" /><br />
주소창에 localhost:4000을 입력하여 블로그에 접속해 테마를 확인해줍니다.<br /></p>

<p><img src="/assets/img/jekyll/repository.png" alt="image" width="100%" height="100%" /><br />
깃허브 레포지토리를 생성해줍니다.<br />
레포지토리 이름은 반드시<br />
📚 계정이름.github.io 으로 해줍니다.<br />
레포지토리와 테마 디렉터리를 연결 후 푸쉬합니다.<br />
❗ 어느정도 시간이 흘러야 블로그가 적용됩니다.</p>

<p><img src="/assets/img/jekyll/blog_check.png" alt="image" width="100%" height="100%" /><br />
주소창에 계정이름.github.io를 입력하여 블로그에 접속하여 줍니다.<br /></p>]]></content><author><name>Mindol</name></author><category term="web" /><category term="jekyll" /><category term="web" /><category term="ruby" /><category term="github" /><summary type="html"><![CDATA[jekyll을 이용한 블로그 만들기]]></summary></entry><entry><title type="html">Tiler</title><link href="http://localhost:4000/unity/2021/02/10/Tiler.html" rel="alternate" type="text/html" title="Tiler" /><published>2021-02-10T06:00:05+09:00</published><updated>2021-02-10T06:00:05+09:00</updated><id>http://localhost:4000/unity/2021/02/10/Tiler</id><content type="html" xml:base="http://localhost:4000/unity/2021/02/10/Tiler.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>2020년 군 전역 후 친구들과 만든 멀티 게임</p>

<h1 id="설치파일">설치파일</h1>
<hr />
<ul>
  <li>클라이언트 다운로드 : <a href="https://github.com/DailyGreen/Tiler-Client/releases/tag/v1.0.0">링크</a><br /></li>
  <li>서버 다운로드 : <a href="https://github.com/DailyGreen/Tiler-Server/releases/tag/v1.0.0">링크</a></li>
</ul>

<h1 id="인게임">인게임</h1>
<hr />
<h2 id="로그인-화면">로그인 화면</h2>
<p><img src="/assets/img/Tiler/Lobby.png" alt="image" width="100%" height="100%" /><br />
서버를 연 컴퓨터의 아이피와 닉네임을 입력합니다.<br /></p>

<h2 id="로비-화면">로비 화면</h2>
<p><img src="/assets/img/Tiler/Menu.png" alt="image" width="100%" height="100%" /><br />
게임 시작 버튼과 게임 설정버튼이 존재합니다.<br /></p>

<p><img src="/assets/img/Tiler/Menu_setting.png" alt="image" width="100%" height="100%" /><br />
설정 버튼을 눌러 게임 볼륨과 효과음을 조절할 수 있습니다.<br /></p>

<p><img src="/assets/img/Tiler/Menu_play.png" alt="image" width="100%" height="100%" /><br />
게임 시작 버튼을 눌러 방을 생성하거나 만들어진 방에 들어갈 수 있습니다.<br /></p>

<h2 id="방-입장">방 입장</h2>
<p><img src="/assets/img/Tiler/Game_Lobby.png" alt="image" width="100%" height="100%" /><br />
방에서 플레이어의 종족, 색상을 변경할 수 있습니다.<br /></p>

<h2 id="종족">종족</h2>
<p><img src="/assets/img/Tiler/Game_Lobby_Tribe.png" alt="image" width="100%" height="100%" /><br />
종족은 3가지 종족이 존재하며, 숲, 바다, 마을종족이 있습니다.<br /></p>

<h2 id="색상-변경">색상 변경</h2>
<p><img src="/assets/img/Tiler/Game_Lobby_Color.png" alt="image" width="100%" height="100%" /><br />
자신의 종족을 구별할 수 있는 원하는 색상을 선택할 수 있습니다.<br /></p>

<p><img src="/assets/img/Tiler/Game_Lobby_User.png" alt="image" width="100%" height="100%" /><br />
최소 2명에서 최대 6명까지 플레이할 수 있습니다.</p>

<h2 id="게임-화면">게임 화면</h2>
<p><img src="/assets/img/Tiler/Ingame_0.png" alt="image" width="100%" height="100%" /><br />
게임이 시작되면 자신 차례에 행동을 할 수 있습니다.</p>

<p><img src="/assets/img/Tiler/Ingame_1.png" alt="image" width="100%" height="100%" /><br />
게임을 시작하면 성에서 일꾼을 생성할 수 있습니다.</p>

<p><img src="/assets/img/Tiler/Ingame_2.png" alt="image" width="100%" height="100%" /><br />
일꾼은 재화를 생성하기위한 광산과 농장 그리고 강력한 병력을 생성할 수 있는 군사기지와<br />
자신의 영역을 지켜줄 수 있는 터렛을 제작할 수 있습니다.</p>

<p><img src="/assets/img/Tiler/Ingame_3.png" alt="image" width="100%" height="100%" /><br />
플레이어가 한턴에 가능한 행동은 최대 2번입니다<br />
또한 우측 하단에 자신의 차례를 건너뛰는 skip버튼이 존재합니다.</p>

<p><img src="/assets/img/Tiler/Ingame_4.png" alt="image" width="100%" height="100%" /><br />
군사기지에서는 일꾼보다 강력한 유닛들을 생성할 수 있습니다.</p>

<p><img src="/assets/img/Tiler/Ingame_5.png" alt="image" width="100%" height="100%" /><br />
마법사는 최대 두칸 이동이 가능합니다.</p>

<p><img src="/assets/img/Tiler/Ingame_6.png" alt="image" width="100%" height="100%" /><br />
일정확률로 턴이 시작될때 보급품이 떨어지게 됩니다.</p>

<p><img src="/assets/img/Tiler/Ingame_7.png" alt="image" width="100%" height="100%" /><br />
보급품을 획득하는 방법은 유닛이 보급품을 공격하면 됩니다.</p>

<p><img src="/assets/img/Tiler/Ingame_8.png" alt="image" width="100%" height="100%" /><br />
보급품 획득 시 식량과 광물중 하나의 재화가 랜덤하게 지급됩니다.</p>

<p><img src="/assets/img/Tiler/Ingame_9.png" alt="image" width="100%" height="100%" /><br />
적의 영역을 발견한 후 침략을 시작할 수 있습니다.</p>

<p><img src="/assets/img/Tiler/Ingame_10.png" alt="image" width="100%" height="100%" /><br />
건물들을 부수고</p>

<p><img src="/assets/img/Tiler/Ingame_11.png" alt="image" width="100%" height="100%" /><br />
적 유닛을 제거하며</p>

<p><img src="/assets/img/Tiler/Ingame_12.png" alt="image" width="100%" height="100%" /><br />
성을 공격하고 성의 체력이 바닥나면</p>

<p><img src="/assets/img/Tiler/Ingame_13.png" alt="image" width="100%" height="100%" /><br />
마지막까지 살아남은 플레이어가 우승합니다.</p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="Unity" /><summary type="html"><![CDATA[턴제 전략게임! Tiler]]></summary></entry><entry><title type="html">Crush Me</title><link href="http://localhost:4000/unity/2018/03/08/CrushMe.html" rel="alternate" type="text/html" title="Crush Me" /><published>2018-03-08T06:00:00+09:00</published><updated>2018-03-08T06:00:00+09:00</updated><id>http://localhost:4000/unity/2018/03/08/CrushMe</id><content type="html" xml:base="http://localhost:4000/unity/2018/03/08/CrushMe.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>2017년에 제작하였지만 2022 K-Game개발 챌린지에 제출하기위해 리메이크 중</p>

<h1 id="설치파일">설치파일</h1>
<hr />
<ul>
  <li><a href="/assets/download/CrushMe.apk"> apk</a><br /></li>
  <li><a href="/assets/download/CrushMe.zip"> zip</a></li>
</ul>

<h1 id="인게임">인게임</h1>
<hr />
<h2 id="메뉴-화면">메뉴 화면</h2>
<p><img src="/assets/img/CrushMe/main.jpg" alt="image" width="50%" height="50%" /><br />
시작버튼을 누르면 게임이 시작됩니다.<br /></p>

<p><img src="/assets/img/CrushMe/setup.jpg" alt="image" width="50%" height="50%" /><br />
화면 우하단 설정 버튼을 눌러 조이스틱의 위치를 바꿀 수 있습니다.</p>

<h2 id="게임-화면">게임 화면</h2>
<p><img src="/assets/img/CrushMe/skill.jpg" alt="image" width="50%" height="50%" /><br />
조이스틱을 움직여 스킬을 최대 두개를 얻을 수 있습니다.</p>

<p><img src="/assets/img/CrushMe/ingame.jpg" alt="image" width="50%" height="50%" /><br />
플레이어를 움직여 최고기록을 갱신해 보세요.</p>

<p><img src="/assets/img/CrushMe/result.jpg" alt="image" width="50%" height="50%" /><br />
플레이어 사망 시 현재기록과 최고기록이 나옵니다.</p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="Unity" /><summary type="html"><![CDATA[제작한 게임 설명 - Crush Me]]></summary></entry><entry><title type="html">Pipe In The Hole</title><link href="http://localhost:4000/unity/2017/12/26/PipeInTheHole.html" rel="alternate" type="text/html" title="Pipe In The Hole" /><published>2017-12-26T06:00:01+09:00</published><updated>2017-12-26T06:00:01+09:00</updated><id>http://localhost:4000/unity/2017/12/26/PipeInTheHole</id><content type="html" xml:base="http://localhost:4000/unity/2017/12/26/PipeInTheHole.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>2016년 겨울방학 팀 프로젝트 시간에 제작한 게임</p>

<h1 id="설치파일">설치파일</h1>
<hr />
<ul>
  <li><a href="/assets/download/PipeInTheHole.apk"> apk</a><br /></li>
  <li><a href="/assets/download/PipeInTheHole.zip"> zip</a></li>
</ul>

<h1 id="인게임">인게임</h1>
<hr />
<h2 id="인트로">인트로</h2>
<p><img src="/assets/img/PipeInTheHole/Intro.jpg" alt="image" width="50%" height="50%" /><br />
이야기가 있는 게임입니다 뒷내용이 궁금하시면 클리어 하시면 알 수 있습니다.<br /></p>

<h2 id="메뉴-화면">메뉴 화면</h2>
<p><img src="/assets/img/PipeInTheHole/Menu.jpg" alt="image" width="50%" height="50%" /><br />
가운데 물방울을 클릭 시 게임이 시작됩니다.</p>

<h2 id="게임-화면">게임 화면</h2>
<p><img src="/assets/img/PipeInTheHole/GamePlay.jpg" alt="image" width="50%" height="50%" /><br />
아래로 떨어지는 오브젝트를 제시되는 틀에 맞춰 화면을 드래그해 돌려줍니다.</p>

<p><img src="/assets/img/PipeInTheHole/Clear.jpg" alt="image" width="50%" height="50%" /><br />
성공 화면</p>

<p><img src="/assets/img/PipeInTheHole/Fail.jpg" alt="image" width="50%" height="50%" /><br />
실패 화면</p>

<p><img src="/assets/img/PipeInTheHole/Result.jpg" alt="image" width="50%" height="50%" /><br />
최종 점수는 오브젝트를 회전한 횟수와 통과 횟수를 더한 값입니다.</p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="Unity" /><summary type="html"><![CDATA[제작한 게임 설명 - Pipe In The Hole]]></summary></entry></feed>