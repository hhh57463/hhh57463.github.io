<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-24T17:15:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mindol</title><subtitle>Mindol&apos;s Blog</subtitle><author><name>Mindol</name></author><entry><title type="html">QGIS3를 이용한 Shapefile 편집</title><link href="http://localhost:4000/qgis/2023/05/24/QGIS3%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Shapefile-%ED%8E%B8%EC%A7%91.html" rel="alternate" type="text/html" title="QGIS3를 이용한 Shapefile 편집" /><published>2023-05-24T06:00:01+09:00</published><updated>2023-05-24T06:00:01+09:00</updated><id>http://localhost:4000/qgis/2023/05/24/QGIS3%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20Shapefile%20%ED%8E%B8%EC%A7%91</id><content type="html" xml:base="http://localhost:4000/qgis/2023/05/24/QGIS3%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Shapefile-%ED%8E%B8%EC%A7%91.html"><![CDATA[<h2 id="tmi">TMI</h2>

<hr />

<p>해당 포스트는 국토지리정보원의 정밀 도로지도(NGII)를 예로 들고 있음.<br /><br />
<a href="https://hhh57463.github.io/qgis/2023/05/22/QGIS3-%EC%82%AC%EC%9A%A9%EB%B2%95.html">QGIS3 사용법</a></p>

<h2 id="shapefile-편집">Shapefile 편집</h2>

<hr />

<h3 id="편집모드">편집모드</h3>

<p>shapefile을 수정할 때는 항상 편집모드가 켜져야한다. 이는 QGIS3의 상단바에 <code class="language-plaintext highlighter-rouge">편집 모드 전환</code> 을 이용하여 켤 수 있다.</p>

<p><img src="/assets/img/QGIS3/edit_1.png" alt="Image" /></p>

<p>편집 모드를 켜면 특정 기능들을 사용할 수 있게 버튼들이 활성화 된다.</p>

<p><img src="/assets/img/QGIS3/edit_2.png" alt="Image" /></p>

<table>
  <thead>
    <tr>
      <th>아이콘</th>
      <th>기능</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/save.png" alt="Image" /></td>
      <td>레이어 편집 내용 저장</td>
      <td>해당 레이어에서 변경된 점을 저장한다.</td>
    </tr>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/add.png" alt="Image" /></td>
      <td>객체 추가</td>
      <td>해당 레이어에 맞는 Shape Type을 추가한다.</td>
    </tr>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/compass.png" alt="Image" /></td>
      <td>꼭짓점 도구</td>
      <td>현재 있는 객체의 꼭짓점을 기준으로 객체를 수정한다.</td>
    </tr>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/alledit.png" alt="Image" /></td>
      <td>선택한 모든 객체의 속성을 동시에 수정</td>
      <td>선택한 모든 객체를 동일한 값으로 수정할 수 있다.</td>
    </tr>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/delete.png" alt="Image" /></td>
      <td>선택 삭제</td>
      <td>선택한 객체를 제거한다.</td>
    </tr>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/cut.png" alt="Image" /></td>
      <td>잘라내기</td>
      <td>선택한 객체를 잘라낸다.</td>
    </tr>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/copy.png" alt="Image" /></td>
      <td>객체 복사</td>
      <td>선택한 객체를 복사한다.</td>
    </tr>
    <tr>
      <td><img src="/assets/img/QGIS3/Icon/paste.png" alt="Image" /></td>
      <td>객체 붙여넣기</td>
      <td>복사한 객체를 붙여넣는다.</td>
    </tr>
  </tbody>
</table>

<h2 id="데이터-수정">데이터 수정</h2>

<hr />

<h3 id="데이터-속성값-수정">데이터 속성값 수정</h3>

<p><code class="language-plaintext highlighter-rouge">이는 .shp를 수정하는 것이 아닌 .dbf의 요소를 수정하는 작업이다.</code></p>

<p>편집 모드가 켜진 상태에서 객체를 식별해준다.</p>

<p><img src="/assets/img/QGIS3/edit_3.png" alt="Image" /></p>

<p>식별 결과 탭에 상단에 있는 <code class="language-plaintext highlighter-rouge">객체 양식 편집</code> 버튼을 선택하여 객체 속성을 수정할 수 있다.</p>

<p><img src="/assets/img/QGIS3/edit_4.png" alt="Image" /></p>

<h2 id="shapefile-수정">Shapefile 수정</h2>

<hr />

<h3 id="데이터-수정-1">데이터 수정</h3>

<p>상단 바 중 <code class="language-plaintext highlighter-rouge">영역 또는 단일 클릭으로 객체 선택</code> 버튼을 선택한다.</p>

<p><img src="/assets/img/QGIS3/edit_5.png" alt="Image" /></p>

<p><img src="/assets/img/QGIS3/edit_6.png" alt="Image" /></p>

<p>해당 상태로 객체를 선택해주면 객체 위에 X표시가 나타난다</p>

<p>상단 탭의 <code class="language-plaintext highlighter-rouge">꼭짓점 도구</code> 를 선택하여 Drag &amp; Drop 하면 해당 꼭짓점의 객체를 이동시킬 수 있다.</p>

<p><img src="/assets/img/QGIS3/shapefile_edit_1.gif" alt="Image" /></p>

<p><code class="language-plaintext highlighter-rouge">Point형의 객체를 선택하면 해당 Point를 이동시킬 수 있다.</code></p>

<p>만약 PolyLine의 Point(지점)을 제거하고 싶다면 객체를 선택한 후 x표시가 나타난 상태에서 해당 객체를 우클릭하면 <code class="language-plaintext highlighter-rouge">꼭짓점 편집기</code> 가 켜진다.</p>

<p><img src="/assets/img/QGIS3/edit_7.png" alt="Image" /></p>

<p>꼭짓점 편집기에서 특정 튜플을 선택하면 객체에도 표시가 되는데 이 상태에서 <code class="language-plaintext highlighter-rouge">Delete</code> 키를 눌러주면 해당 꼭짓점을 삭제할 수 있다.</p>

<h3 id="데이터-삽입">데이터 삽입</h3>

<p>편집 모드 전환을 선택한 상태로 상단바의 <code class="language-plaintext highlighter-rouge">객체 추가</code> 버튼을 선택한다.</p>

<p><img src="/assets/img/QGIS3/shapefile_edit_2.gif" alt="Image" /></p>

<p>마우스 좌클릭으로 꼭짓점을 지정한 후 마우스 우클릭으로 완료해준다.</p>

<p><code class="language-plaintext highlighter-rouge">현재는 선택한 레이어가 PolyLine Type이기 때문에 꼭짓점을 지정해주어야 한다, 선택한 레이어가 Point Type일 시 Point의 위치를 지정해주면 된다.</code></p>

<p>.shp 데이터를 추가했으니 .dbf에 맞는 속성도 정의해 준 후 확인 버튼을 클릭하면 데이터가 추가된다.</p>

<p><img src="/assets/img/QGIS3/edit_8.png" alt="Image" /></p>

<p>해당 객체를 식별 해보면 입력한 속성 값이 들어간 것을 볼 수 있다.</p>

<h2 id="데이터-저장">데이터 저장</h2>

<hr />

<p>모든 편집이 종료되면 레이어 편집 내용 저장을 통해 변경된 내용을 저장해야 한다.</p>

<p><img src="/assets/img/QGIS3/edit_9.png" alt="Image" /></p>]]></content><author><name>Mindol</name></author><category term="QGIS" /><category term="QGIS" /><category term="shapefile" /><summary type="html"><![CDATA[Shapefile edit]]></summary></entry><entry><title type="html">QGIS3 사용법</title><link href="http://localhost:4000/qgis/2023/05/23/QGIS3-%EC%82%AC%EC%9A%A9%EB%B2%95.html" rel="alternate" type="text/html" title="QGIS3 사용법" /><published>2023-05-23T06:00:01+09:00</published><updated>2023-05-23T06:00:01+09:00</updated><id>http://localhost:4000/qgis/2023/05/23/QGIS3%20%EC%82%AC%EC%9A%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/qgis/2023/05/23/QGIS3-%EC%82%AC%EC%9A%A9%EB%B2%95.html"><![CDATA[<h2 id="qgis란">QGIS란?</h2>

<hr />

<p>QGIS: 공간데이터 조회, 편집, 분석 기능을 제공하는 대표적인 오픈소스 데스크탑 지리정보시스템(GIS) 소프트웨어.</p>

<p><a href="[https://www.qgis.org/ko/site/](https://www.qgis.org/ko/site/)">설치링크</a></p>

<h2 id="tmi">TMI</h2>

<hr />

<p>해당 포스트는 국토지리정보원의 정밀 도로지도(NGII)를 예로 들고 있음.</p>

<h2 id="qgis3-사용법">QGIS3 사용법</h2>

<hr />

<h3 id="레이어-추가제거">레이어 추가/제거</h3>

<p>QGIS3를 실행하면 아래와 같은 화면이 시작된다.</p>

<p><img src="/assets/img/QGIS3/useage_1.png" alt="Image" /></p>

<p><img src="/assets/img/QGIS3/useage_2.png" alt="Image" /></p>

<p>QGIS3에 Shapefile(.shp)을 올리고 싶으면 좌하단 레이어 탭에 Shapefile을 Drag&amp;Drop한다.</p>

<p>특정 레이어를 제외하고 싶을 시 레이어 탭에서 해당 레이어의 이름 좌측 체크박스로 껏다 켤 수 있다.</p>

<p><img src="/assets/img/QGIS3/useage_3.png" alt="Image" /></p>

<p><code class="language-plaintext highlighter-rouge">A2_LINK의 체크박스 해제 후 모습</code></p>

<p><img src="/assets/img/QGIS3/useage_4.png" alt="Image" /></p>

<p>특정 레이어를 제거하고 싶을 시 레이어 선택 후 레이어 탭 중 상단 바에서 우측에 있는 <code class="language-plaintext highlighter-rouge">레이어/그룹 제거</code> 버튼을 클릭하거나, Ctrl + D를 사용하여 제거할 수 있다.</p>

<p>각 레이어의 심볼을 변경하고 싶을 경우 레이어 탭의 각 레이어를 더블클릭하여 수정할 수 있다.</p>

<p>변경할 수 있는 심볼은 각 레이어의 Shape Type에 맞는 심볼이 나온다.</p>

<p><img src="/assets/img/QGIS3/useage_5.png" alt="Image" /></p>

<p><code class="language-plaintext highlighter-rouge">Point Type의 Layer</code></p>

<p><img src="/assets/img/QGIS3/useage_6.png" alt="Image" /></p>

<p><code class="language-plaintext highlighter-rouge">PolyLine의 Layer</code></p>

<p>나는 각 레이어 식별을 쉽게하기 위해 색을 조정했다.</p>

<p><img src="/assets/img/QGIS3/useage_7.png" alt="Image" /></p>

<h3 id="데이터-조회">데이터 조회</h3>

<p>특정 데이터의 정보를 확인하기 위해서는 상단 바에서 객체 식별을 선택 후 확인해야한다.</p>

<p><img src="/assets/img/QGIS3/useage_8.png" alt="Image" /></p>

<p>‘A1_NODE’의 데이터를 확인하고 싶을 시, 레이어 탭에서 A1_NODE레이어를 선택 후 확인해야한다.</p>

<p><img src="/assets/img/QGIS3/useage_9.png" alt="Image" /></p>

<p>선택한 데이터는 식별 결과 탭에서 확인 가능하다.</p>

<p>특정 데이터의 속성을 검색하고 싶을 시 상단 바에서 <code class="language-plaintext highlighter-rouge">속성테이블 열기</code>를 클릭하거나 F6를 눌러 속성테이블을 켤 수 있다.</p>

<p><img src="/assets/img/QGIS3/useage_10.png" alt="Image" /></p>

<p><img src="/assets/img/QGIS3/useage_13.png" alt="Image" /></p>

<p>‘A1_NODE’의 속성 테이블</p>

<p><img src="/assets/img/QGIS3/useage_11.png" alt="Image" /></p>

<p>속성테이블의 상단 바에서 <code class="language-plaintext highlighter-rouge">서식을 이용해서 객체 선택/필터링</code> 을 선택하거나 Ctrl + F를 입력하여 검색란을 열 수 있다.</p>

<p><img src="/assets/img/QGIS3/useage_12.png" alt="Image" />
검색하려는 속성의 우측 <code class="language-plaintext highlighter-rouge">필드제외</code> 콤보박스를 클릭하면 검색 조건을 변경할 수 있다.</p>

<p>검색하려는 속성을 입력한 후 아래의 검색 방법 버튼을 클릭하여 특정 속성을 검색할 수 있다.</p>]]></content><author><name>Mindol</name></author><category term="QGIS" /><category term="QGIS" /><category term="shapefile" /><summary type="html"><![CDATA[QGIS3 useage]]></summary></entry><entry><title type="html">Shapefile Format</title><link href="http://localhost:4000/study/2023/05/19/%EA%B3%B5%EB%B6%80-Shapefile-Format.html" rel="alternate" type="text/html" title="Shapefile Format" /><published>2023-05-19T06:00:01+09:00</published><updated>2023-05-19T06:00:01+09:00</updated><id>http://localhost:4000/study/2023/05/19/%5B%EA%B3%B5%EB%B6%80%5DShapefile%20Format</id><content type="html" xml:base="http://localhost:4000/study/2023/05/19/%EA%B3%B5%EB%B6%80-Shapefile-Format.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>교내 연구실에서 연구 진행 중 Shapefile format 분석을 의뢰받아 정리하여 요약</p>

<h2 id="목차">목차</h2>

<hr />

<ol>
  <li>shapefile이란?</li>
  <li>Little Endian, Big Endian</li>
  <li>shapefile 구성요소</li>
</ol>

<h2 id="shapefile이란">Shapefile이란?</h2>

<hr />

<p>.shp를 확장자로 가지며, 벡터방식으로 공간정보를 저장하는 파일.</p>

<p>shapefile은 점(Point), 선(Line), 면(Polygon) 중 하나의 속성을 가지며, shapefile에서 면(Polygon)을 잘라내거나 합칠 수 있다.</p>

<p>shapefile은 서로 다른 확장명을 가진 세 개 이상의 파일로 구성되는데</p>

<ul>
  <li>.shp - 피처의 지오메트리(형상)을 저장하는 기본파일</li>
  <li>.shp - 피처의 기하학의 색인을 저장하는 인덱스 파일</li>
  <li>.dbf - 피처의 속성 정보를 저장하는 dBASE 테이블</li>
</ul>

<p>이들을 구성 요소 파일이라 부른다.</p>

<p>위의 3개의 파일을 main file이라 칭하며 그 외에는 아래의 파일이 존재.</p>

<ul>
  <li>.prj - 지리 좌표를 알려주는 파일</li>
  <li>.sbn - 지리 공간 인덱스를 저장하는 파일</li>
  <li>.sbx - spatial join의 기능을 수행하거나 shape 필드에 대한 인덱스 생성에 필요한 파일</li>
</ul>

<p>*spatial join (공간결합): 두 공간 데이터프레임을 결합(merge)하는데, key 값이 아닌 위치정보에 따라 결합(overlay)해주는 방식.</p>

<h2 id="little-endian-big-endian">Little Endian, Big Endian</h2>

<hr />

<p>컴퓨터는 데이터를 메모리에 저장할 때 byte 단위로 나누어 저장하지만, 컴퓨터가 저장하는 데이터는 대게 32bit(4byte)나 64bit(8byte)로 구성된다.</p>

<p>따라서 연속되는 byte를 순서대로 저장해야 하는데, 이것을 바이트 저장 순서(byte order)라고 함.</p>

<p>바이트가 저장되는 순서에 따라 두 가지 방법으로 나눌 수 있다.</p>

<ul>
  <li>리틀 엔디안(Little Endian)</li>
  <li>빅 엔디안(Big Endian)</li>
</ul>

<h3 id="little-endian">Little Endian</h3>

<p>낮은 주소에 데이터의 낮은 바이트(LSB, Least Significant Bit)부터 저장하는 방식.</p>

<p>이 방식은 평소 우리가 숫자를 사용하는 선형 방식과는 반대로 거꾸로 읽어야 한다.</p>

<p>대부분 인텔 CPU 계열에서 이 방식으로 데이터를 저장함.</p>

<p>0x12345678을 저장해야 할 경우 이 정수는 0x12, 0x34, 0x56, 0x78로 1byte 값 4개로 구성됨.</p>

<p>이 4개의 1byte 값을 Big Endian 방식으로 저장되면 그림과 같이 저장됨.</p>

<p><img src="/assets/img/Shapefile/Shapefile_1.png" alt="리틀 엔디안 저장 방식" /></p>

<h3 id="big-endian">Big Endian</h3>

<p>낮은 주소에 데이터의 높은 바이트(MSB, Most Significant Bit)부터 저장하는 방식.</p>

<p>평소 우리가 숫자를 사용하는 선형 방식과 같은 방식.</p>

<p>메모리에 저장된 순서 그대로 읽을 수 있으며, 이해하기 쉽다는 장점을 가짐.</p>

<p>SPARC을 포함한 대부분의 RISC CPU 계열에서 이 방식으로 데이터를 저장함.</p>

<p>0x12345678을 저장해야 할 경우 이 정수는 0x12, 0x34, 0x56, 0x78로 1byte 값 4개로 구성됨.</p>

<p>이 4개의 1byte 값을 Big Endian 방식으로 저장되면 그림과 같이 저장됨.</p>

<p><img src="/assets/img/Shapefile/Shapefile_2.png" alt="빅 엔디안 저장 방식" /></p>

<h3 id="리틀-엔디안-vs-빅-엔디안">리틀 엔디안 vs 빅 엔디안</h3>

<p>빅 엔디안과 리틀 엔디안은 단지 저장해야 할 큰 데이터를 어떻게 나누어 저장하는가에 따른 차이일 뿐, 어느 방식이 더 우수하다고는 단정할 수 없음.</p>

<p>물리적으로 데이터를 조작하거나 산술 연산을 수행할 때에는 리틀 엔디안 방식이 더 효율적이지만,데이터의 각 바이트를 배열처럼 취급할 때에는 빅 엔디안 방식이 더 적합.</p>

<p>대부분의 시스템은 인텔 기반의 윈도우이므로 리틀 엔디안 방식을 사용.</p>

<p>네트워크를 통해 데이터를 전송할 때에는 빅 엔디안 방식이 사용.</p>

<p>인텔 기반의 시스템에서 소켓 통신을 할 때는 바이트 순서에 신경을 써서 데이터를 전달해야 함.</p>

<h2 id="shapefile-구성요소">Shapefile 구성요소</h2>

<hr />

<p>shapefile은 다음과 같이 구성됨.</p>

<p><img src="/assets/img/Shapefile/Shapefile_3.png" alt="Shapefile 구성요소" /></p>

<h3 id="file-header-구성">File Header 구성</h3>

<table>
  <thead>
    <tr>
      <th>Position</th>
      <th>Field</th>
      <th>Value</th>
      <th>Type</th>
      <th>Byte Order</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Byte 0</td>
      <td>File Code</td>
      <td>9994</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 4</td>
      <td>Unused</td>
      <td>0</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 8</td>
      <td>Unused</td>
      <td>0</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 12</td>
      <td>Unused</td>
      <td>0</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 16</td>
      <td>Unused</td>
      <td>0</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 20</td>
      <td>Unused</td>
      <td>0</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 24</td>
      <td>File Length</td>
      <td>File Length</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 28</td>
      <td>Version</td>
      <td>1000</td>
      <td>Integer</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 32</td>
      <td>Shape Type</td>
      <td>Shape Type</td>
      <td>Integer</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 36</td>
      <td>Bounding Box</td>
      <td>Xmin</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 44</td>
      <td>Bouding Box</td>
      <td>Ymin</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 52</td>
      <td>Bounding Box</td>
      <td>Xmax</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 60</td>
      <td>Bouding Box</td>
      <td>Ymax</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 68*</td>
      <td>Bounding Box</td>
      <td>Zmin</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 76*</td>
      <td>Bouding Box</td>
      <td>Zmax</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 84*</td>
      <td>Bounding Box</td>
      <td>Mmin</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 92*</td>
      <td>Bouding Box</td>
      <td>Mmax</td>
      <td>Double</td>
      <td>Little Endian</td>
    </tr>
  </tbody>
</table>

<p>Bounding Box란 해당 SHP 파일의 MBR(Minimum Bounding Rectangle)을 의미.</p>

<p>*MBR: 여러 점으로 구성되어 있을 경우 해당 점을 둘러싸고 있는 가장  작은 사각형으로, 해당 개체가 포함된 지도상의 위치를 대략적으로 표시하는 정보를 가짐.</p>

<h3 id="shape-type">Shape Type</h3>

<p>File Header구성 중 Byte32에 위치한 Shape Type은 이름당 값이 지정되어 있으며, 아래와 같다.</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>NULL</td>
      <td>0</td>
    </tr>
    <tr>
      <td>POINT</td>
      <td>1</td>
    </tr>
    <tr>
      <td>ARC</td>
      <td>3</td>
    </tr>
    <tr>
      <td>POLYGON</td>
      <td>5</td>
    </tr>
    <tr>
      <td>MULTIPOINT</td>
      <td>8</td>
    </tr>
    <tr>
      <td>POINTZ</td>
      <td>11</td>
    </tr>
    <tr>
      <td>ARCZ</td>
      <td>13</td>
    </tr>
    <tr>
      <td>POLYGONZ</td>
      <td>15</td>
    </tr>
    <tr>
      <td>MULTIPOINTZ</td>
      <td>18</td>
    </tr>
    <tr>
      <td>POINTM</td>
      <td>21</td>
    </tr>
    <tr>
      <td>ARCM</td>
      <td>23</td>
    </tr>
    <tr>
      <td>POLYGONM</td>
      <td>25</td>
    </tr>
    <tr>
      <td>MULTIPOINTM</td>
      <td>28</td>
    </tr>
    <tr>
      <td>MULTIPATCH</td>
      <td>31</td>
    </tr>
  </tbody>
</table>

<p>SHP 포맷은 한 파일에 하나의 Shape Type만을 수용한다. 따라서 Point와 Line이 같은 파일에 있을 수 없다.</p>

<h3 id="record-header">Record Header</h3>

<table>
  <thead>
    <tr>
      <th>Position</th>
      <th>Field</th>
      <th>Value</th>
      <th>Type</th>
      <th>Order</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Byte 0</td>
      <td>Record Number</td>
      <td>Record Number</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
    <tr>
      <td>Byte 4</td>
      <td>Content Length</td>
      <td>Content Length</td>
      <td>Integer</td>
      <td>Big Endian</td>
    </tr>
  </tbody>
</table>

<p>Record Header는 거의 사용되지 않음.(.shx 파일을 이용해 shp를 포인팅할 수 있기 때문)</p>

<h3 id="record-contents">Record Contents</h3>

<p>Record Contents는 실제 점(Point), 선(Line), 면(Polygon)이 기록되어 있으며, Shape Type에 따라 달라짐.</p>

<p>ShapeType - Point</p>

<table>
  <thead>
    <tr>
      <th>Position</th>
      <th>Field</th>
      <th>Value</th>
      <th>Type</th>
      <th>Number</th>
      <th>Order</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Byte 0</td>
      <td>Shape Type</td>
      <td>1</td>
      <td>Integer</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 4</td>
      <td>X</td>
      <td>X</td>
      <td>Double</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 12</td>
      <td>Y</td>
      <td>Y</td>
      <td>Double</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
  </tbody>
</table>

<p>Point는 double로 된 x, y로 구성되어 있는 값.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Point</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="n">x</span><span class="p">;</span>
  <span class="kt">double</span> <span class="n">y</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ShapeType - Multi Point</p>

<p>Multi Point(다중 포인트)는 여러 개의 점을 하나의 개체로 인식하는 것. 위치가 다른 곳에 있는 점이라도 같은 속성을 지니고 있을 경우 이들을 하나로 묶어서 사용하기 좋음</p>

<table>
  <thead>
    <tr>
      <th>Position</th>
      <th>Field</th>
      <th>Value</th>
      <th>Type</th>
      <th>Number</th>
      <th>Order</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Byte 0</td>
      <td>Shape Type</td>
      <td>8</td>
      <td>Integer</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 4</td>
      <td>Box</td>
      <td>Box</td>
      <td>Double</td>
      <td>4</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 36</td>
      <td>NumPoints</td>
      <td>NumPoints</td>
      <td>Integer</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 40</td>
      <td>Points</td>
      <td>Points</td>
      <td>Point</td>
      <td>NumPoints</td>
      <td>Little Endian</td>
    </tr>
  </tbody>
</table>

<p>Byte 4에 위치한 Box 또한 MBR.</p>

<p>Byte 36의 NumPoints는 개체가 가지는 점(Point)의 개수를 나타내며, Multi Point는 여러 개의 점을 하나의 개체로 묶은 것이기 때문에, 개체당 점이 하나 이상 존재할 수 있음.</p>

<p>Byte 40부터는 개체 내에 실제로 포함된 점(Point)들을 담고 있는 것으로, 개체당 하나 이상의 점이 존재할 수 있으므로, NumPoints만큼의 Point가 나열됨.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">MultiPoint</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="n">Box</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">NumPoints</span><span class="p">;</span>
  <span class="n">Point</span><span class="p">[</span><span class="n">NumPoints</span><span class="p">]</span> <span class="n">Points</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ShapeType - PolyLine, Arc</p>

<p>아크는 Line 혹은 PolyLine을 수용하는 구조체로, 다중 포인트처럼 위치가 다른 곳에 있는 선을 같은 개체로 처리할 수 있음.</p>

<table>
  <thead>
    <tr>
      <th>Position</th>
      <th>Field</th>
      <th>Value</th>
      <th>Type</th>
      <th>Number</th>
      <th>Order</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Byte 0</td>
      <td>Shape Type</td>
      <td>3</td>
      <td>Integer</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 4</td>
      <td>Box</td>
      <td>Box</td>
      <td>Double</td>
      <td>4</td>
      <td>Litle Endian</td>
    </tr>
    <tr>
      <td>Byte 36</td>
      <td>NumParts</td>
      <td>NumParts</td>
      <td>Integer</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 40</td>
      <td>NumPoints</td>
      <td>NumPoints</td>
      <td>Integer</td>
      <td>1</td>
      <td>Litle Endian</td>
    </tr>
    <tr>
      <td>Byte 44</td>
      <td>Parts</td>
      <td>Parts</td>
      <td>Integer</td>
      <td>NumParts</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte X</td>
      <td>Points</td>
      <td>Points</td>
      <td>Point</td>
      <td>NumParts</td>
      <td>Litle Endian</td>
    </tr>
  </tbody>
</table>

<p>*Part: 한 Arc 개체에 몇 개의 PolyLine이 존재하는지</p>

<p>Byte 4의 Box 역시 MBR을 의미</p>

<p>Byte 36의 NumParts는 Arc 개체에 속한 PolyLine 개체의 수를 나타내며, Byte 40의 NumPoints는 해당 Arc 개체에 포함된 전체 점의 수를 의미.</p>

<p>Byte 40의 NumPoints는 개체에 있는 점의 수를 의미, 위치나 Part와 관계없이 저장되며 점의 개수가 몇 개인지 지정하는 것.</p>

<p>Byte 44의 Parts는 각각의 PolyLine 개체가 몇 개의 점으로 이루어져 있는지를 나타내며, 이를 통해 어느 부분이 어떤 PolyLine에 속하는지를 파악할 수 있음.</p>

<p>Byte X의 Points는 각 점의 위치를 나타내며, PolyLine 개체의 경우는 순서대로 각 점의 위치가 저장되며, Arc 개체의 경우는 여러 개의 PolyLine으로 이루어져 있으므로 Parts 정보를 통해 어느 PolyLine에 속하는지를 파악한 후 해당 PolyLine에 속한 각 점의 위치가 순서대로 저장됨.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">PolyLine</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="n">Box</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">NumParts</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">NumPoints</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">Parts</span><span class="p">[</span><span class="n">NumParts</span><span class="p">];</span>
  <span class="n">Point</span><span class="p">[</span><span class="n">NumPoints</span><span class="p">]</span> <span class="n">Points</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ShapeType - Polygon</p>

<p>Polygon은 PolyLine 혹은 Arc의 구조와 같지만 파트별로 시작점과 끝점이 같아서 닫혀있다는 것을 강조.</p>

<table>
  <thead>
    <tr>
      <th>Position</th>
      <th>Field</th>
      <th>Value</th>
      <th>Type</th>
      <th>Number</th>
      <th>Order</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Byte 0</td>
      <td>Shape Type</td>
      <td>5</td>
      <td>Integer</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 4</td>
      <td>Box</td>
      <td>Box</td>
      <td>Double</td>
      <td>4</td>
      <td>Litle Endian</td>
    </tr>
    <tr>
      <td>Byte 36</td>
      <td>NumParts</td>
      <td>NumParts</td>
      <td>Integer</td>
      <td>1</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte 40</td>
      <td>NumPoints</td>
      <td>NumPoints</td>
      <td>Integer</td>
      <td>1</td>
      <td>Litle Endian</td>
    </tr>
    <tr>
      <td>Byte 44</td>
      <td>Parts</td>
      <td>Parts</td>
      <td>Integer</td>
      <td>NumParts</td>
      <td>Little Endian</td>
    </tr>
    <tr>
      <td>Byte X</td>
      <td>Points</td>
      <td>Points</td>
      <td>Point</td>
      <td>NumParts</td>
      <td>Litle Endian</td>
    </tr>
  </tbody>
</table>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Polygon</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="n">Box</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">NumParts</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">NumPoints</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">Parts</span><span class="p">[</span><span class="n">NumParts</span><span class="p">];</span>
  <span class="n">Point</span><span class="p">[</span><span class="n">NumPoints</span><span class="p">]</span> <span class="n">Points</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="출처-및-참고">출처 및 참고</h3>
<hr />
<p><a href="https://yganalyst.github.io/spatial_analysis/spatial_analysis_4/">[GIS] 공간 데이터 결합(Spatial Join)</a></p>

<p><a href="http://www.tcpschool.com/c/c_refer_endian">코딩교육 티씨피스쿨</a></p>

<p><a href="https://velog.io/@cha-suyeon/QGIS-알아가기-shapefile이란-무엇일까.shp">QGIS 알아가기 - shapefile이란 무엇일까?(.shp)</a></p>

<p><a href="https://endofcap.tistory.com/3">[SHPViewer 강좌 1] SHP 포맷 분석 1</a></p>

<p><a href="https://docs.fileformat.com/gis/shp/">SHP - ESRI Shapefile</a></p>]]></content><author><name>Mindol</name></author><category term="Study" /><category term="study" /><category term="shapefile" /><summary type="html"><![CDATA[shapefile format]]></summary></entry><entry><title type="html">JsonUtility</title><link href="http://localhost:4000/unity/2023/04/03/JsonUtility.html" rel="alternate" type="text/html" title="JsonUtility" /><published>2023-04-03T06:00:01+09:00</published><updated>2023-04-03T06:00:01+09:00</updated><id>http://localhost:4000/unity/2023/04/03/JsonUtility</id><content type="html" xml:base="http://localhost:4000/unity/2023/04/03/JsonUtility.html"><![CDATA[<p>최근 RPG제작에 용이한 기능들을 제작하는 프로젝트 <a href="https://github.com/hhh57463/RPG_Helper">RPG_Helper</a>를 제작하던 중 인벤토리 구현에 필요한 DB연동 대신 JSON을 활용하던 중 알게된 부분을 정리한다.</p>

<h2 id="json">JSON?</h2>
<hr />
<p>JavaScript Object Notaion의 약자로 직역하자면 자바 스크립트 객체 표기법으로 데이터를 쉽게 교환 및 저장하기 위한 텍스트 기반의 데이터 교환 표준이다.<br /><br /></p>

<h3 id="json-구조">JSON 구조</h3>
<p>자료형: string, number, true, false, null, object, array<br />
기본적으로 <code class="language-plaintext highlighter-rouge">key: value</code> 형태의 구조를 가지며, <code class="language-plaintext highlighter-rouge">중괄호 {}</code>로 감싸게 됨<br />
key 값은 문자열로 이루어져야하며, value에는 지원되는 자료형으로 이루어지면 된다<br /><br /></p>

<pre><code class="language-JSON">{

    "나이" : 25,                      // number
    "이름" : "Mindol",                // string
    "취미" : ["영화감상", "노래방"]   // array
}
</code></pre>

<h3 id="json-장단점">JSON 장단점</h3>
<ul>
  <li>텍스트 기반으로 다양한 프로그래밍 언어에서 데이터를 읽고 사용이 가능</li>
  <li>내용이 함축적으로 최소한의 정보만을 가짐</li>
  <li>내용이 함축적이다 보니 의미 파악이 힘들 수 있음</li>
</ul>

<h2 id="jsonutility">JsonUtility</h2>
<hr />
<p>Unity에서 지원하는 JSON 데이터 작업을 위한 유틸리티 함수로, 데이터를 JSON형태로 저장 및 읽어올 수 있다.</p>

<h2 id="example">Example</h2>
<hr />
<p>만약 게임이 종료될 때 플레이어의 위치를 저장하고 게임을 재시작하면 저장된 위치를 불러와야하는 기능을 구현하려면 어떻게 해야할까?</p>

<h2 id="json-export">JSON export</h2>
<hr />
<p>우선 2D환경에서 CharactorController를 이용한 간단한 이동을 구현했다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">float</span> <span class="n">h</span> <span class="p">=&gt;</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Horizontal"</span><span class="p">);</span>
<span class="kt">float</span> <span class="n">v</span> <span class="p">=&gt;</span> <span class="n">Input</span><span class="p">.</span><span class="nf">GetAxis</span><span class="p">(</span><span class="s">"Vertical"</span><span class="p">);</span>
<span class="k">void</span> <span class="nf">Move</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Vector2</span> <span class="n">movement</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector2</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
    <span class="n">movement</span> <span class="p">*=</span> <span class="p">(</span><span class="n">moveSpeed</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">);</span>
    <span class="n">controller</span><span class="p">.</span><span class="nf">Move</span><span class="p">(</span><span class="n">movement</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>게임이 종료될 때 위치를 저장해야하니 OnApplicationQuit함수를 이용했다.<br /></p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">OnApplicationQuit</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Vector2</span> <span class="n">savePos</span> <span class="p">=</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">;</span>
    <span class="kt">string</span> <span class="n">path</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">Path</span><span class="p">.</span><span class="nf">Combine</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">dataPath</span> <span class="p">+</span>
                                        <span class="s">"/Json/"</span><span class="p">,</span> <span class="s">"playerdata.json"</span><span class="p">);</span>
    <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="nf">WriteAllText</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">JsonUtility</span><span class="p">.</span><span class="nf">ToJson</span><span class="p">(</span><span class="n">savePos</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="코드해석">코드해석</h3>
<p>Vector2 savePos: 플레이어의 월드좌표를 저장하는 변수<br /><br />
string path: JSON파일을 생성할 위치지정 Application.dataPath를 이용하여 현재 프로젝트 Assets폴더에 접근 가능하다. 최종적으로 <code class="language-plaintext highlighter-rouge">Assets/Json/playerdata.json</code>이라는 경로가 지정된다.<br /><br />
JsonUtility.ToJson(savePos): JsonUtility.ToJson함수를 이용하여 객체를 JSON문법으로 변환하여 WriteAllText함수로 지정된 경로에 저장하였다.</p>

<h3 id="jsonutilitytojson">JsonUtility.ToJson</h3>
<p>매개변수로 들어온 객체를 JSON문법으로 변환해준다. Debug.Log함수를 이용하여 확인해보면<br />
<img src="/assets/img/Unity/JsonUtility_1.png" alt="image" /><br />
Vector2형식을 JSON형식으로 변환한 것을 볼 수 있다.</p>

<h2 id="json-import">JSON import</h2>
<hr />
<p>이제 반대로 JSON파일에서 불러오는 작업을 수행해야하는데, JSON파일을 읽어오는 함수 LoadJson을 만들어준 후 플레이어 객체가 생성될 때 호출해야하므로 Start함수에서 호출해줬다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">LoadJson</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">loadData</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="nf">ReadAllText</span><span class="p">(</span>
                        <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">Path</span><span class="p">.</span><span class="nf">Combine</span><span class="p">(</span><span class="n">Application</span><span class="p">.</span><span class="n">dataPath</span> <span class="p">+</span> 
                        <span class="s">"/Json/"</span><span class="p">,</span> <span class="s">"playerdata.json"</span><span class="p">));</span>
    <span class="n">transform</span><span class="p">.</span><span class="n">position</span> <span class="p">=</span> <span class="n">JsonUtility</span><span class="p">.</span><span class="n">FromJson</span><span class="p">&lt;</span><span class="n">Vector2</span><span class="p">&gt;(</span><span class="n">loadData</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="코드해석-1">코드해석</h3>
<p>string loadData: playerdata.json을 ReadAllText함수를 이용하여 문자열로 저장해준다.<br /><br />
JsonUtility.FromJson<Vector2>(loadData): 읽어온 JSON 데이터를 Vector2자료형으로 반환한다.<br /><br /></Vector2></p>

<h3 id="jsonutilityfromjson">JsonUtility.FromJson</h3>
<p>매개변수로 읽어온 JSON데이터(문자열)를 지정한 자료형으로 변환하여 반환한다.<br />
<code class="language-plaintext highlighter-rouge">JsonUtility.FromJson&lt;자료형&gt;(문자열);</code></p>

<h3 id="결과">결과</h3>
<hr />
<p><img src="/assets/img/Unity/JsonUtility_2.gif" alt="image" /><br />
실행하여 플레이어를 이동시킨 후 재시작하면 종료했던 위치로 플레이어가 이동하는 것을 볼 수 있다.<br /></p>

<h3 id="여러-데이터-json화-시키기">여러 데이터 JSON화 시키기</h3>
<hr />
<p>만약 플레이어의 위치 뿐만 아닌 여러 데이터를 JSON에 저장해야할 경우에는 배열로 저장하여 JSON에 저장해야한다.<br /></p>

<p><a href="https://github.com/hhh57463/RPG_Helper">RPG_Helper</a> 제작 중 획득한 아이템 리스트를 JSON에 저장하였는데 아이템의 종류는 장착, 소비, 기타 이렇게 3개의 종류가 있다. 해당 아이템들을 각각의 리스트로 구현하였는데 이를 각자 다른 데이터로 저장해주었다.</p>

<p>아래는 JSON파일에 들어갈 아이템의 구성 요소이다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Serializable</span><span class="p">]</span>           <span class="c1">// 직렬화</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ItemsData</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">name</span><span class="p">;</span>         <span class="c1">// 아이템 이름</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">info</span><span class="p">;</span>         <span class="c1">// 아이템 정보</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>           <span class="c1">// 아이템 갯수</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">link</span><span class="p">;</span>         <span class="c1">// 아이템 이미지 링크</span>

    <span class="c1">// 새로운 아이템을 획득할 때 사용하는 생성자</span>
    <span class="k">public</span> <span class="nf">ItemsData</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">info</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">,</span> <span class="kt">string</span> <span class="n">link</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">info</span> <span class="p">=</span> <span class="n">info</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">count</span> <span class="p">=</span> <span class="n">count</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">link</span> <span class="p">=</span> <span class="n">link</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>아래는 아이템을 관리할 ItemDataMng클래스의 구성 요소이다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Serializable</span><span class="p">]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ItemDataMng</span>
<span class="p">{</span>
    <span class="c1">// 장착 아이템</span>
    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ItemsData</span><span class="p">&gt;</span> <span class="n">equipItem</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ItemsData</span><span class="p">&gt;();</span>
    <span class="c1">// 소비 아이템     </span>
    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ItemsData</span><span class="p">&gt;</span> <span class="n">consumItem</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ItemsData</span><span class="p">&gt;();</span>
    <span class="c1">// 기타 아이템</span>
    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ItemsData</span><span class="p">&gt;</span> <span class="n">etcItem</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ItemsData</span><span class="p">&gt;();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>아래는 JSON 데이터를 변환하여 저장하는 소스코드들이다.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextAsset</span> <span class="n">itemJson</span><span class="p">;</span>        <span class="c1">// JSON 데이터 파일</span>
<span class="n">ItemDataMng</span> <span class="n">itemDatas</span><span class="p">;</span>     <span class="c1">// 아이템을 관리할 변수(인벤토리)</span>
<span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// JSON파일을 읽어와 인벤토리에 데이터 저장</span>
    <span class="n">itemDatas</span> <span class="p">=</span> <span class="n">JsonUtility</span><span class="p">.</span><span class="n">FromJson</span><span class="p">&lt;</span><span class="n">ItemDataMng</span><span class="p">&gt;(</span><span class="n">itemJson</span><span class="p">.</span><span class="n">text</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 게임 종료시 가지고 있는 아이템 저장</span>
<span class="k">void</span> <span class="nf">OnApplicationQuit</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">string</span> <span class="n">saveData</span> <span class="p">=</span> <span class="n">JsonUtility</span><span class="p">.</span><span class="nf">ToJson</span><span class="p">(</span><span class="n">itemDatas</span><span class="p">);</span>
    <span class="kt">string</span> <span class="n">fileName</span> <span class="p">=</span> <span class="s">"ItemData.json"</span><span class="p">;</span>
    <span class="kt">string</span> <span class="n">path</span> <span class="p">=</span> <span class="n">Application</span><span class="p">.</span><span class="n">dataPath</span> <span class="p">+</span> <span class="s">"/Inventory/Json/"</span> <span class="p">+</span> <span class="n">fileName</span><span class="p">;</span>
    <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="nf">WriteAllText</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">saveData</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="결과-json-파일">결과 (JSON 파일)</h2>
<hr />
<p><img src="/assets/img/Unity/JsonUtility_3.png" alt="image" /><br />
여러 데이터가 JSON 파일에 저장되는 것을 볼 수 있으며,<br /><br />
<img src="/assets/img/Unity/JsonUtility_4.gif" alt="image" /><br />
각각의 데이터에 맞는 요소들이 인벤토리에 저장되는 것을 볼 수 있다.(이미지 로드가 늦는 이유는 인터넷에서 받아오기에 속도차이가 있다.)</p>

<h2 id="주의점">주의점</h2>
<hr />
<p>만약 JSON파일에서 내용을 읽어와 클래스나 구조체에 저장한다면 JSON의 이름과 해당 데이터를 저장하는 변수의 이름을 같게 지정해줘야한다.<br /><br />
해당 포스팅의 내용을 보면 아이템의 종류를 나타내는 <code class="language-plaintext highlighter-rouge">equipItem, cousumItem, etcItem</code>이 JSON 내부의 데이터 이름과 같을걸 볼 수 있다.<br /><br />
만약 서로 이름이 다르면 아래처럼 데이터가 잘 불러와지지 않거나, 에러가 발생한다.<br />
<img src="/assets/img/Unity/JsonUtility_5.png" alt="image" /><br /></p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="study" /><summary type="html"><![CDATA[JsonUtility를 이용한 JSON 파싱]]></summary></entry><entry><title type="html">[Flutter] - VSCode 편의기능</title><link href="http://localhost:4000/flutter/2023/02/22/Flutter-VSCode-%EA%B8%B0%EB%8A%A5.html" rel="alternate" type="text/html" title="[Flutter] - VSCode 편의기능" /><published>2023-02-22T06:00:02+09:00</published><updated>2023-02-22T06:00:02+09:00</updated><id>http://localhost:4000/flutter/2023/02/22/Flutter%20VSCode%20%EA%B8%B0%EB%8A%A5</id><content type="html" xml:base="http://localhost:4000/flutter/2023/02/22/Flutter-VSCode-%EA%B8%B0%EB%8A%A5.html"><![CDATA[<h2 id="editorcodeactionsonsave">editor.codeActionsOnSave</h2>
<hr />
<p><img src="/assets/img/Flutter/flutter_craft_1.png" alt="image" width="50%" height="50%" /><br />
VSCode로 Flutter를 하다보면 코드 아래 밑줄이 생기는 것을 볼 수 있다<br /><br />
<img src="/assets/img/Flutter/flutter_craft_2.png" alt="image" /><br />
커서를 올려보면 바뀌지 않는 값을 const로 지정해 주라는 뜻이다<br /><br />
<img src="/assets/img/Flutter/flutter_craft_3.png" alt="image" width="50%" height="50%" /><br />
VSCode좌하단 설정버튼→명령 팔레트 클릭 또는 <code class="language-plaintext highlighter-rouge">Ctrl + Shift + P</code> 후<br /><br />
<img src="/assets/img/Flutter/flutter_craft_4.png" alt="image" /><br />
<code class="language-plaintext highlighter-rouge">open user Settings</code>를 입력하면<br /><br />
<img src="/assets/img/Flutter/flutter_craft_5.png" alt="image" /><br />
settings.json 파일이 열린다<br /><br />
<img src="/assets/img/Flutter/flutter_craft_6.png" alt="image" /><br />
하단에 <code class="language-plaintext highlighter-rouge">"editor.codeActionsOnSave": {"source.fixAll": true},</code>를 입력해준다<br /><br />
이제 코드 작업을 수행한 후 저장하면 밑줄이 생기던 코드가 자동으로 수정된다.</p>

<h2 id="dartpreviewflutteruiguides">dart.previewFlutterUiGuides</h2>
<hr />
<p><img src="/assets/img/Flutter/flutter_craft_7.png" alt="image" /><br />
위젯의 부모가 무엇인지 가이드라인을 시각적으로 보여주는 기능<br /><br />
<img src="/assets/img/Flutter/flutter_craft_8.png" alt="image" /><br />
settings.json파일 하단에 <code class="language-plaintext highlighter-rouge">"dart.previewFlutterUiGuides": true,</code> 를 입력후 저장하고 VSCode를 껏다 켜주면 적용된다.</p>

<h2 id="code-actions">Code Actions</h2>
<hr />
<p>Code Actions: 코드를 간단한 방법으로 리팩토링 해주는 기능
<img src="/assets/img/Flutter/flutter_craft_9.png" alt="image" width="50%" height="50%" /><br />
만약 해당 Column을 Padding으로 감싸고 싶으면 Column을 클릭 후 왼쪽 노란 전구를 클릭해준다.<br /><br />
<img src="/assets/img/Flutter/flutter_craft_10.png" alt="image" width="50%" height="50%" /><br />
Wrap with Padding을 클릭해주면 <br /><br />
<img src="/assets/img/Flutter/flutter_craft_11.png" alt="image" width="50%" height="50%" /><br />
원래라면 복사 붙여넣기 해서 Padding을 추가했다면 클릭 한번으로 Padding으로 감쌀 수 있다.<br /><br />
<img src="/assets/img/Flutter/flutter_craft_12.png" alt="image" width="50%" height="50%" /><br />
Remove this widget을 클릭하면<br /><br />
<img src="/assets/img/Flutter/flutter_craft_13.png" alt="image" width="50%" height="50%" /><br />
해당 위젯이 사라지는것을 볼 수 있다.</p>]]></content><author><name>Mindol</name></author><category term="Flutter" /><category term="Flutter" /><category term="Dart" /><summary type="html"><![CDATA[코드 자동 수정, 가이드라인, 리팩토링]]></summary></entry><entry><title type="html">URP</title><link href="http://localhost:4000/unity/2023/02/08/URP.html" rel="alternate" type="text/html" title="URP" /><published>2023-02-08T07:00:00+09:00</published><updated>2023-02-08T07:00:00+09:00</updated><id>http://localhost:4000/unity/2023/02/08/URP</id><content type="html" xml:base="http://localhost:4000/unity/2023/02/08/URP.html"><![CDATA[<h2 id="urp">URP?</h2>
<hr />
<p>항상 유니티 vs 언리얼에서 유니티가 무시받던 것이 바로 그래픽 능력. 유니티에서 새로운 파이프라인을 만들어 제공했는데 기존에는 디폴트 파이프라인이었지만, 설정을 통해 새로운 파이프라인을 사용할 수 있다.<br /><br />
Universal Render Pipeline (URP): Unity에서 제작한 사전 빌드된 스크립터블 렌더 파이프라인<br /><br />
URP는 아티스트 친화적 워크플로를 통해 모바일, 고사양 콘솔, PC 등 다양한 플랫폼에서 최적화된 그래픽스를 쉽고 빠르게 구현하도록 도와준다.</p>

<h2 id="urp-설정">URP 설정</h2>
<hr />
<p><img src="/assets/img/Unity/URP_1.png" alt="image" /><br />
Window→Package Manager<br /><br />
<img src="/assets/img/Unity/URP_2.png" alt="image" /><br />
Packages를 Unity Registry로 변경 후 Universal RP를 찾아 install<br /><br />
<img src="/assets/img/Unity/URP_3.png" alt="image" /><br />
Packages 디렉터리에 Universal RP가 생긴것을 볼 수 있다<br /><br />
Render Pipeline을 기존 디폴트에서 URP로 변경해줘야한다.<br /><br />
<img src="/assets/img/Unity/URP_4.png" alt="image" /><br />
Create→Rendering→URP Asset (with Universal Renderer)<br /><br />
<img src="/assets/img/Unity/URP_5.png" alt="image" /><br />
두개의 파일이 생성된다.<br /><br />
두 파일 중 Universal Render Pipeline Asset을 적용시켜줘야한다.<br /><br />
<img src="/assets/img/Unity/URP_6.png" alt="image" /><br />
Project Settings→Graphics→Scriptable Render Pipeline Settings에 Universal Render Pipeline Asset을 연결해준다.</p>

<h2 id="material">Material</h2>
<hr />
<p><img src="/assets/img/Unity/URP_7.png" alt="image" /><br />
Material의 Shader가 Universal Render Pipeline/Lit으로 설정되어있다.<br /><br />
파이프라인이 변경되어 셰이더를 URP에 있는 것들만 사용해야 한다.</p>

<h2 id="shader">Shader</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>셰이더</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2D</td>
      <td>2D 프로젝트 개발시 사용</td>
    </tr>
    <tr>
      <td>Autodesk Interactive</td>
      <td>AutoDesk 응용 프로그램과 조정할 때 사용</td>
    </tr>
    <tr>
      <td>Nature</td>
      <td>Speed Tree에 특화된 셰이더 포함</td>
    </tr>
    <tr>
      <td>Particle</td>
      <td>이펙트 제작에 사용 (파티클 시스템)</td>
    </tr>
    <tr>
      <td>Baked Lit</td>
      <td>라이트 맵과 라이트 프로브를 통해 베이크된 조명만 필요한 스타일화 된 게임이나 앱에 사용<br /><br />물리적 기반 셰이딩을 사용하지 않으며 실시간 조명이 없어 실시관 관련 셰이더 키워브 및 변형이 셰이더 코드에서 제거되어 계산 속도가 빠르다<br /><br />미리 라이트 관련된 것들을 실시간으로 계산하지 않을때 사용</td>
    </tr>
    <tr>
      <td>Lit</td>
      <td>실제 표면을 사실적인 품질로 렌더링 시켜줌. 무거우며 디폴트로 설정되어있음</td>
    </tr>
    <tr>
      <td>Simple Lit</td>
      <td>성능이 좋지만 리얼한 셰이더 느낌이 아님, Lit을 사용하기엔 무겁고 Baked Lit을 할 줄 모른다면 사용</td>
    </tr>
    <tr>
      <td>Unlit</td>
      <td>전역 조명을 샘플링하는 옵션이 있는 조명없는 셰이더, Unity의 스톡 언릿 셰이더 대체</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="study" /><summary type="html"><![CDATA[Unity URP]]></summary></entry><entry><title type="html">Cinemachine</title><link href="http://localhost:4000/unity/2023/02/07/Cinemachine.html" rel="alternate" type="text/html" title="Cinemachine" /><published>2023-02-07T06:00:01+09:00</published><updated>2023-02-07T06:00:01+09:00</updated><id>http://localhost:4000/unity/2023/02/07/Cinemachine</id><content type="html" xml:base="http://localhost:4000/unity/2023/02/07/Cinemachine.html"><![CDATA[<h2 id="시네머신">시네머신?</h2>
<hr />
<p>영화 촬영을 하는 것처럼 씬을 촬영하여 게임 화면상에 비추어주는 유니티 패키지.<br /><br />
기본적으로 카메라 오브젝트를 생성하지 않고 가상 카메라를 이용.<br /><br />
가상 카메라는 원래 있는 카메라 오브젝트를 이용하여 여러 환경에서 비추어줄 씬을 보여주도록 도와줌.<br /><br />
가상 카메라는 서로에게 영향을 끼치지 않으며, 유니티 카메라에도 영향을 받지 않아 자유로운 카메라 구성이 가능.</p>

<h2 id="패키지-추가">패키지 추가</h2>
<hr />

<p><img src="/assets/img/Unity/Cinemachine_1.png" alt="image" /><br />
Window→Package Manager<br /><br />
<img src="/assets/img/Unity/Cinemachine_2.png" alt="image" /><br />
Packages를 Unity Registry로 변경 후 Cinemachine을 찾아 install<br /><br />
<img src="/assets/img/Unity/Cinemachine_3.png" alt="image" /><br />
Packages 디렉터리에 Cinemachine이 생긴것을 볼 수 있다<br /><br />
<img src="/assets/img/Unity/Cinemachine_4.png" alt="image" /><br />
Hierachy에서 시네머신 카메라를 생성할 수 있다.<br /><br /></p>

<h2 id="종류">종류</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>카메라</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Virtual Camera</td>
      <td>기본적인 카메라, 유니티 카메라를 조정하듯 자유롭게 활용 가능</td>
    </tr>
    <tr>
      <td>FreeLook Camera</td>
      <td>오브젝트를 중심으로 원형의 링을 생성하여 그 구간 안에서 타깃을 관찰하는 카메라</td>
    </tr>
    <tr>
      <td>Blend List Camera</td>
      <td>할당된 버추얼 카메라들을 정해진 블랜드 방식에 따라 순차적으로 전환하는 카메라</td>
    </tr>
    <tr>
      <td>State-Driven Camera</td>
      <td>타겟 애니메이션의 상태별로 활성화/비활성화 시킬 수 있는 카메라</td>
    </tr>
    <tr>
      <td>ClearShot Camera</td>
      <td>플레이어의 충돌/트리거 상태에 따라 활성화/비활성화 시킬 수 있는 카메라</td>
    </tr>
    <tr>
      <td>Dolly Camera</td>
      <td>트랙을 깔아 해당 트랙에 따라 움직이는 카메라, Dolly Track과 함께 사용</td>
    </tr>
    <tr>
      <td>Target Group Camera</td>
      <td>그룹으로 묶인 카메라들을 자동으로 계산해 한 화면에 보여주는 카메라</td>
    </tr>
    <tr>
      <td>Mixing Camera</td>
      <td>Child Camera Weight 값에 따라 활성화/비활성화 해주는 카메라</td>
    </tr>
    <tr>
      <td>2D Camera</td>
      <td>직교 뷰로 사용되는 카메라</td>
    </tr>
  </tbody>
</table>

<h2 id="프로퍼티-설명">프로퍼티 설명</h2>
<hr />
<p>💡 가장 기본적인 Virtual Camera의 설명<br />
<img src="/assets/img/Unity/Cinemachine_5.png" alt="image" /><br /><br />
Save During Play: 에디터 Play 중 내용을 변경해도 설정 저장<br /><br />
Priority: 카메라 우선도<br /><br />
Follow: 따라다닐 오브젝트<br /><br />
Look At: 바라볼 오브젝트<br /><br />
Standby Update: Live 상태가 아닌 카메라의 업데이트 빈도</p>
<ul>
  <li>Never: 항상</li>
  <li>Always: Live 일때만</li>
  <li>Round Robine: 정기적으로</li>
</ul>

<p>Transitions: 카메라 사이 이동시 씬 전환 효과<br /><br />
Body: 카메라의 위치<br /><br />
Aim: 카메라의 각도<br /></p>

<h2 id="body">Body</h2>
<hr />
<p><img src="/assets/img/Unity/Cinemachine_6.png" alt="image" /><br /><br />
Follow Offset: 카메라와 대상의 거리<br /><br />
Damping(제동): 값의 급격한 변화를 꺾어 부드럽게 이어주는 비율, 값이 커질 수록 부드러워져 민감도가 줄어듬</p>

<h2 id="aim">Aim</h2>
<hr />
<p><img src="/assets/img/Unity/Cinemachine_7.png" alt="image" /><br /><br />
Tracked Object Offset: 대상에서 얼마나 더 떨어진 곳에서 바라볼지 (y값을 늘리면 대상보다 높은 곳을 조준한다)<br /><br />
Damping: 회전 속도에 대한 제동값<br /><br />
Dead Zone: 데드존의 크기<br /><br />
Soft Zone: 소프트존의 크기<br /></p>

<h2 id="soft-zone-dead-zone">Soft Zone, Dead Zone</h2>
<hr />
<p><img src="/assets/img/Unity/Cinemachine_8.png" alt="image" /><br /><br />
<span style="color:red">
Dead Zone(데드존)
</span>: 대상이 데드존 내에서 움직이는 동안에는 카메라가 회전하지 않는다<br /><br />
<span style="color:blue">
Soft Zone(소프트존)
</span>: 대상이 소프트존 내에 있다면 카메라가 부드럽게 회전하여 대상이 데드존 안으로 들어가게 한다<br /><br />
<span style="color:yellow">
하드리밋
</span>: 소프트존보다 바깥에 있어 더 빠르고 격한 속도로 회전하며 대상이 데드존 안으로 들어가게 함<br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">데드존이 클 수록 화면은 느리고 부드럽게 움직이며, 데드존이 작을수록 화면은 빠르고 격하게 움직임</code></p>

<h2 id="테스트">테스트</h2>
<hr />
<p>오브젝트를 생성하여 상하좌우로 움직이는 코드를 구현한 후 시네머신의 Follow, Look At에 연결해주었다.<br />
<img src="/assets/img/Unity/Cinemachine_9.gif" alt="image" /><br /><br /></p>

<p>카메라가 회전하여 오브젝트가 데드존으로 들어가게 하는 것을 볼 수 있다.</p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="study" /><summary type="html"><![CDATA[Unity Cinemachine]]></summary></entry><entry><title type="html">Unity 플랫폼별 구분하여 작업</title><link href="http://localhost:4000/unity/2023/02/03/Different-for-each-Platform.html" rel="alternate" type="text/html" title="Unity 플랫폼별 구분하여 작업" /><published>2023-02-03T06:00:01+09:00</published><updated>2023-02-03T06:00:01+09:00</updated><id>http://localhost:4000/unity/2023/02/03/%20Different%20for%20each%20Platform</id><content type="html" xml:base="http://localhost:4000/unity/2023/02/03/Different-for-each-Platform.html"><![CDATA[<h2 id="플랫폼-의존-컴파일">플랫폼 의존 컴파일</h2>
<hr />
<p>유니티를 작업하다보면 플랫폼에 따라 다르게 동작해야하는 경우가 있다. 그럴때는 Unity의 <code class="language-plaintext highlighter-rouge">플랫폼 의존 컴파일</code> 기능을 이용하여 여러 플랫폼을 대응할 수 있다.<br /></p>

<h2 id="플랫폼에-따른-코드-구현">플랫폼에 따른 코드 구현</h2>
<hr />
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#if 심볼(플랫폼)
</span>    <span class="c1">// 코드 작성</span>
<span class="cp">#endif
</span></code></pre></div></div>
<p>이렇게 코드를 작성해 주면 해당 플랫폼에서만 동작하는 코드를 작성할 수 있다. Unity에 지정되어있는 심볼로 아래가 있다.<br />
<img src="/assets/img/Unity/Platform_1.png" alt="image" /><br /><br />
<a href="https://docs.unity3d.com/kr/current/Manual/PlatformDependentCompilation.html">링크-유니티 공식 문서</a><br /></p>

<h2 id="예시">예시</h2>
<hr />
<p><img src="/assets/img/Unity/Platform_2.png" alt="image" width="50%" height="50%" /><br />
플랫폼에 따라 화면에 보이는 Text가 다르게 변화하도록 코드를 작성한다.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
<span class="cp">#if UNITY_EDITOR                        // Unity Editor
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: Unity Editor"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Editor"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_STANDALONE_WIN                // Window
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: Window"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Window"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_STANDALONE_OSX                // macOS
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: OSX"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"OSX"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_IOS                           // IOS
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: IOS"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"IOS"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_ANDROID                       // Android
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: Android"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Android"</span><span class="p">);</span>
<span class="cp">#endif
</span>    <span class="p">}</span>
</code></pre></div></div>

<h2 id="실행결과">실행결과</h2>
<hr />
<p>Window로 빌드한 결과 잘 되는것을 볼 수 있다.<br />
<img src="/assets/img/Unity/Platform_3.png" alt="image" width="50%" height="50%" /><br /><br />
하지만 Unity Editor상에서도 똑같은 결과가 나오는 것을 확인 할 수 있다.<br />
<img src="/assets/img/Unity/Platform_4.png" alt="image" width="50%" height="50%" /><br /><br />
그 이유는 Build Setting중 Platform이 Window로 되어있기 때문에, Editor에서 실행되는 코드와 Window에서 실행되는 코드 둘 다 실행되기 때문이다.<br />
콘솔창을 확인해 보면 Editor, Window 둘다 출력되는 것을 볼 수 있다.<br />
<img src="/assets/img/Unity/Platform_5.png" alt="image" width="50%" height="50%" /><br /><br />
Platform을 Android로 변경한 후 다시 실행시켜보면 Android가 출력되는 것을 볼 수 있다.<br />
<img src="/assets/img/Unity/Platform_6.png" alt="image" width="50%" height="50%" /><br /><br />
<img src="/assets/img/Unity/Platform_7.png" alt="image" width="50%" height="50%" /></p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="study" /><summary type="html"><![CDATA[Unity 플랫폼 의존 컴파일]]></summary></entry><entry><title type="html">Unity Photon 주요 기능</title><link href="http://localhost:4000/unity/2023/01/30/Photon.html" rel="alternate" type="text/html" title="Unity Photon 주요 기능" /><published>2023-01-30T06:00:01+09:00</published><updated>2023-01-30T06:00:01+09:00</updated><id>http://localhost:4000/unity/2023/01/30/Photon</id><content type="html" xml:base="http://localhost:4000/unity/2023/01/30/Photon.html"><![CDATA[<h2 id="photon의-개념">Photon의 개념</h2>
<hr />

<p><img src="/assets/img/Photon/Photon_1.png" alt="image" width="50%" height="50%" /><br />
Photon 연결할 때 App ID를 입력하고 연결하면 생기는 셋팅<br />
이 중 App ID가 같을 때는 같은 네트워크를 사용한다는 뜻<br /></p>
<ul>
  <li>포톤 서버에는 룸과 로비의 개념이 있음</li>
  <li>룸은 네트워크 게임을 실행할 수 있는 논리적인 공간</li>
  <li>룸에 입장해야만 해당 룸에 접속한 다른 유저와 통신이 가능</li>
  <li>로비에 입장하려면 로비 입장 함수를 호출해야 로비에 입장 가능</li>
  <li>로비는 현재 룸이 생성되었는지에 대한 정보를 수신받을 수 있음</li>
  <li>룸이 목록을 받아와 특정 룸에 입장이 가능</li>
</ul>

<h2 id="photon-통신을-위한-콜백함수">Photon 통신을 위한 콜백함수</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>함수 이름</th>
      <th>호출 조건</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>OnConnectedToMaster()</td>
      <td>포톤 서버에 접속 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnJoinedLobby()</td>
      <td>로비에 접속 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnJoinRandomFailed(short returnCode, string message)</td>
      <td>랜덤 룸 입장 실패했을 때 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnCreatedRoom()</td>
      <td>룸 생성이 완료된 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnJoinedRoom()</td>
      <td>룸에 입장한 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnDisconnected(DisconnectCause cause)</td>
      <td>연결이 끊겼을때 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnPlayerEnteredRoom(Player newPlayer)</td>
      <td>현재 룸에 새로운 유저가 들어왔을때 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnPlayerLeftRoom(Player otherPlayer)</td>
      <td>현재 룸에 유저가 나갔을때 호출되는 콜백 함수</td>
    </tr>
  </tbody>
</table>

<h2 id="photon-주요-메소드-프로퍼티">Photon 주요 메소드, 프로퍼티</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>이름</th>
      <th>종류</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>PhotonNetwork.AutomaticallySyncScene</td>
      <td>프로퍼티</td>
      <td>같은 룸의 유저들에게 자동으로 씬을 로딩할 것인지</td>
    </tr>
    <tr>
      <td>PhotonNetwork.GameVersion</td>
      <td>프로퍼티</td>
      <td>게임 접속 버전 ( 같은 버전의 유저끼리 접속 허용)</td>
    </tr>
    <tr>
      <td>PhotonNetwork.NickName</td>
      <td>프로퍼티</td>
      <td>객체의 닉네임</td>
    </tr>
    <tr>
      <td>PhotonNetwork.SendRate</td>
      <td>프로퍼티</td>
      <td>포톤 서버와 통신 횟수</td>
    </tr>
    <tr>
      <td>PhotonNetwork.ConnectUsingSettings()</td>
      <td>메소드</td>
      <td>서버 접속</td>
    </tr>
    <tr>
      <td>PhotonNetwork.JoinLobby()</td>
      <td>메소드</td>
      <td>로비 입장</td>
    </tr>
    <tr>
      <td>PhotonNetwork.JoinRandomRoom()</td>
      <td>메소드</td>
      <td>랜덤 매치메이킹</td>
    </tr>
    <tr>
      <td>PhotonNetwork.CreateRoom(“룸 이름”, 룸 속성(Default: null))</td>
      <td>메소드</td>
      <td>속성을 가진 룸 생성</td>
    </tr>
    <tr>
      <td>PhotonNetwork.JoinRoom(“룸 이름”)</td>
      <td>메소드</td>
      <td>해당 이름을 가진 룸에 입장</td>
    </tr>
    <tr>
      <td>PhotonNetwork.InLobby</td>
      <td>프로퍼티</td>
      <td>로비에 접속 되었는지</td>
    </tr>
    <tr>
      <td>PhotonNetwork.CurrentRoom</td>
      <td>프로퍼티</td>
      <td>현재 룸의 정보</td>
    </tr>
    <tr>
      <td>PhotonNetwork.InRoom</td>
      <td>프로퍼티</td>
      <td>룸에 접속 되었는지</td>
    </tr>
    <tr>
      <td>PhotonNetwork.Instantiate(“Prefab 이름”, position, rotation, 0)</td>
      <td>함수</td>
      <td>포톤 Instantiate</td>
    </tr>
  </tbody>
</table>

<h2 id="photon-view-스크립트">Photon View 스크립트</h2>
<hr />

<p>네트워크에 접속한 플레이어간 데이터를 송수신해주는 통신 모듈로, 동일한 룸에 입장한 다른 플레이어에게 자신의 위치와 회전 정보를 동기화 해주며, 특정한 데이터를 송수신 가능하며 네트워크 개체당 한개만 사용할 것을 권장. (네트워크 대역폭과 성능상의 이유로)<br />
<img src="/assets/img/Photon/Photon_2.png" alt="image" width="50%" height="50%" /><br /></p>

<p>Synchronization: 동기화 처리를 어떻게 할 것인지 기능에 따라 성능이 달라짐</p>

<table>
  <thead>
    <tr>
      <th>속성</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Off</td>
      <td>동기화 처리 X. RPC 호출만을 위한 PhotonView에 적합 (RPC: 원격 프로시저 호출 물리적으로 떨어져있는 다른 디바이스간의 함수를 호출하는 기능)</td>
    </tr>
    <tr>
      <td>Reliable Delta Compressed</td>
      <td>마지막 데이터가 변경되지 않았을 때 데이터 송신 X</td>
    </tr>
    <tr>
      <td>Unreliable</td>
      <td>패킷의 수신 여부를 확인 X</td>
    </tr>
    <tr>
      <td>Unreliable On Change</td>
      <td>UnReliable과 동일하며 변경사항이 발생했을 때만 송신</td>
    </tr>
  </tbody>
</table>

<h2 id="phton-transform-view-스크립트">Phton Transform View 스크립트</h2>
<hr />
<p><img src="/assets/img/Photon/Photon_3.png" alt="image" width="50%" height="50%" /><br />
플레이어의 위치, 회전값을 동기화하기 위한 모듈<br /><br />
Synchronize Options: 체크되어있는 옵션을 동기화해라<br />
Use Local: 동기화하는 데이터가 Local 기준인지<br /></p>

<h2 id="photon-animator-view">Photon Animator View</h2>
<hr />
<p><img src="/assets/img/Photon/Photon_4.png" alt="image" width="50%" height="50%" /><br />
애니메이터 컴포넌트를 동기화해주는 모듈<br />
애니메이터 정보를 읽어 레이어와 파라미터 값을 자동으로 동기화 해줌<br /><br />
Synchronize Layer Weights 애니메이션 동기화 횟수인것 같음<br /></p>

<table>
  <thead>
    <tr>
      <th>속성</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Disabled</td>
      <td>안함</td>
    </tr>
    <tr>
      <td>Discrete</td>
      <td>이산</td>
    </tr>
    <tr>
      <td>Continuous</td>
      <td>연속</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="network" /><summary type="html"><![CDATA[Photon-PUN]]></summary></entry><entry><title type="html">[Flutter] - UI</title><link href="http://localhost:4000/flutter/2023/01/29/Flutter-%EA%B8%B0%EC%B4%88-UI.html" rel="alternate" type="text/html" title="[Flutter] - UI" /><published>2023-01-29T06:00:01+09:00</published><updated>2023-01-29T06:00:01+09:00</updated><id>http://localhost:4000/flutter/2023/01/29/Flutter%20%EA%B8%B0%EC%B4%88-UI</id><content type="html" xml:base="http://localhost:4000/flutter/2023/01/29/Flutter-%EA%B8%B0%EC%B4%88-UI.html"><![CDATA[<h2 id="시작하기-전">시작하기 전…</h2>
<hr />
<p><img src="/assets/img/Flutter/flutter_UI_1.png" alt="image" width="50%" height="50%" /><br />
클래스에 커서를 올려서 확인해보면 nullsafety가 되어있는 필드들은 꼭 필요하지 않다는것 같음.<br />
(근데 나머진 다 디폴트로 들어가있는데…? 아직 잘 모르겠음)<br /></p>

<h2 id="color">Color</h2>
<hr />
<p>Colors.색상 다음 .을 입력하면 색조를 고를 수 있음 (얼마나 어두워질것인지)<br />
<img src="/assets/img/Flutter/flutter_UI_2.png" alt="image" width="50%" height="50%" /><br />
Color(0xFF색상코드)로 색상지정이 가능<br />
<img src="/assets/img/Flutter/flutter_UI_3.png" alt="image" width="50%" height="50%" /><br />
색상.Opacity()로 투명도를 조정할 수 있다<br />
<img src="/assets/img/Flutter/flutter_UI_4.png" alt="image" width="50%" height="50%" /><br /></p>

<h2 id="column">Column</h2>
<hr />
<p>자식으로 다른 위젯을 넣으려면 Column 클래스 이용<br />
하나의 Column에 두개의 Text를 넣는 예제<br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">home:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">backgroundColor:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">black</span><span class="p">,</span>
        <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
      <span class="p">),</span>
</code></pre></div></div>
<p>결과<br />
<img src="/assets/img/Flutter/flutter_UI_5.png" alt="image" width="50%" height="50%" /><br />
너무 위에 있어 아래로 좀 내려야 할듯함 그럴때 사용하는게 SizedBox<br /></p>

<h2 id="sizedbox">SizedBox</h2>
<hr />
<p>크기가 있는 박스, 공간을 만들때 사용</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">SizedBox</span><span class="p">(</span>
              <span class="nl">height:</span> <span class="mi">80</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
</code></pre></div></div>
<p>Column안에 SizedBox의 높이를 80으로 지정해주고 두개의 Text를 넣어준 예제<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_6.png" alt="image" width="50%" height="50%" /><br />
위에 SizedBox가 생긴 후 Text가 그려지는것을 볼 수 있다<br />
이제 텍스트를 오른쪽으로 옮겨보자<br /></p>

<h2 id="alignment정렬">Alignment(정렬)</h2>
<hr />
<p>Row의 MainAxisAlignment은 수평방향이지만<br />
Column의 MainAxisAlignment은 수직방향 <br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">home:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">backgroundColor:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">black</span><span class="p">,</span>
        <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">SizedBox</span><span class="p">(</span>
              <span class="nl">height:</span> <span class="mi">80</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">end</span><span class="p">,</span> <span class="c1">// &lt;- Row의 정렬 속성 변경</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
      <span class="p">),</span>
</code></pre></div></div>
<p>Row클래스의 mainAxisAlignment를 start에서 end로 변경해주었다<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_7.png" alt="image" width="50%" height="50%" /><br />
이제 Text의 크기를 변경해줄 것이다<br /></p>

<h2 id="text">Text</h2>
<hr />
<p>첫번째 텍스트의 크기를 더 크고, 진하게 할 것이다<br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">SizedBox</span><span class="p">(</span>
              <span class="nl">height:</span> <span class="mi">80</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">end</span><span class="p">,</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="nl">fontSize:</span> <span class="mi">38</span><span class="p">,</span>
                        <span class="nl">fontWeight:</span> <span class="n">FontWeight</span><span class="o">.</span><span class="na">w600</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
</code></pre></div></div>
<p>fontSize로 폰트의 크기를 정해고, fontWeight로 더 진하게 해줄 것이다<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_8.png" alt="image" width="50%" height="50%" /><br />
현재 텍스트는 가운데 정렬을 하고있지만 모든 텍스트를 오른쪽에 붙이고 싶다<br />
하지만 Column의 MainAxis는 수직이고, CrossAxis는 수평이다(Row와 반대)<br />
Column 클래스의 crossAxisAlignment값을 CrossAxisAlignment.end로 변경<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_9.png" alt="image" width="50%" height="50%" /><br />
잘 정렬되는 것을 볼 수 있다.<br />
하지만 너무 오른쪽에 붙어 있는것 같아 공백을 조금 주고 싶다<br /></p>

<h2 id="padding">Padding</h2>
<hr />
<p>지금까지 만들었던 Column을 Padding으로 감싸서 전체적으로 공백을 주려한다.<br />
padding을 사용할때는 padding을 명시해야하는데,<br />
padding클래스에<code class="language-plaintext highlighter-rouge">padding: EdgeInsets</code>를 입력하면 알 수 있다.<br /></p>
<ul>
  <li>EdgeInsets.all(): 값만큼 화면의 상하좌우 모두 padding을 줌<br /></li>
  <li>EdgeInsets.only(): 상하좌우 중 한 가지를 구체적으로 정할 수 있음<br /></li>
  <li>EdgeInsets.symmetric(): 수직 padding과 수평 padding을 지정할 수 있음<br /></li>
</ul>]]></content><author><name>Mindol</name></author><category term="Flutter" /><category term="Flutter" /><category term="Dart" /><summary type="html"><![CDATA[플러터의 기초 공부]]></summary></entry></feed>