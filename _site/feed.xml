<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-02-22T12:13:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mindol</title><subtitle>Mindol&apos;s Blog</subtitle><author><name>Mindol</name></author><entry><title type="html">[Flutter] - VSCode 편의기능</title><link href="http://localhost:4000/flutter/2023/02/22/Flutter-VSCode-%EA%B8%B0%EB%8A%A5.html" rel="alternate" type="text/html" title="[Flutter] - VSCode 편의기능" /><published>2023-02-22T06:00:02+09:00</published><updated>2023-02-22T06:00:02+09:00</updated><id>http://localhost:4000/flutter/2023/02/22/Flutter%20VSCode%20%EA%B8%B0%EB%8A%A5</id><content type="html" xml:base="http://localhost:4000/flutter/2023/02/22/Flutter-VSCode-%EA%B8%B0%EB%8A%A5.html"><![CDATA[<h2 id="editorcodeactionsonsave">editor.codeActionsOnSave</h2>
<hr />
<p><img src="/assets/img/Flutter/flutter_craft_1.png" alt="image" width="50%" height="50%" /><br />
VSCode로 Flutter를 하다보면 코드 아래 밑줄이 생기는 것을 볼 수 있다<br /><br />
<img src="/assets/img/Flutter/flutter_craft_2.png" alt="image" /><br />
커서를 올려보면 바뀌지 않는 값을 const로 지정해 주라는 뜻이다<br /><br />
<img src="/assets/img/Flutter/flutter_craft_3.png" alt="image" width="50%" height="50%" /><br />
VSCode좌하단 설정버튼→명령 팔레트 클릭 또는 <code class="language-plaintext highlighter-rouge">Ctrl + Shift + P</code> 후<br /><br />
<img src="/assets/img/Flutter/flutter_craft_4.png" alt="image" /><br />
<code class="language-plaintext highlighter-rouge">open user Settings</code>를 입력하면<br /><br />
<img src="/assets/img/Flutter/flutter_craft_5.png" alt="image" /><br />
settings.json 파일이 열린다<br /><br />
<img src="/assets/img/Flutter/flutter_craft_6.png" alt="image" /><br />
하단에 <code class="language-plaintext highlighter-rouge">"editor.codeActionsOnSave": {"source.fixAll": true},</code>를 입력해준다<br /><br />
이제 코드 작업을 수행한 후 저장하면 밑줄이 생기던 코드가 자동으로 수정된다.</p>

<h2 id="dartpreviewflutteruiguides">dart.previewFlutterUiGuides</h2>
<hr />
<p><img src="/assets/img/Flutter/flutter_craft_7.png" alt="image" /><br />
위젯의 부모가 무엇인지 가이드라인을 시각적으로 보여주는 기능<br /><br />
<img src="/assets/img/Flutter/flutter_craft_8.png" alt="image" /><br />
settings.json파일 하단에 <code class="language-plaintext highlighter-rouge">"dart.previewFlutterUiGuides": true,</code> 를 입력후 저장하고 VSCode를 껏다 켜주면 적용된다.</p>

<h2 id="code-actions">Code Actions</h2>
<hr />
<p>Code Actions: 코드를 간단한 방법으로 리팩토링 해주는 기능
<img src="/assets/img/Flutter/flutter_craft_9.png" alt="image" width="50%" height="50%" /><br />
만약 해당 Column을 Padding으로 감싸고 싶으면 Column을 클릭 후 왼쪽 노란 전구를 클릭해준다.<br /><br />
<img src="/assets/img/Flutter/flutter_craft_10.png" alt="image" width="50%" height="50%" /><br />
Wrap with Padding을 클릭해주면 <br /><br />
<img src="/assets/img/Flutter/flutter_craft_11.png" alt="image" width="50%" height="50%" /><br />
원래라면 복사 붙여넣기 해서 Padding을 추가했다면 클릭 한번으로 Padding으로 감쌀 수 있다.<br /><br />
<img src="/assets/img/Flutter/flutter_craft_12.png" alt="image" width="50%" height="50%" /><br />
Remove this widget을 클릭하면<br /><br />
<img src="/assets/img/Flutter/flutter_craft_13.png" alt="image" width="50%" height="50%" /><br />
해당 위젯이 사라지는것을 볼 수 있다.</p>]]></content><author><name>Mindol</name></author><category term="Flutter" /><category term="Flutter" /><category term="Dart" /><summary type="html"><![CDATA[코드 자동 수정, 가이드라인, 리팩토링]]></summary></entry><entry><title type="html">URP</title><link href="http://localhost:4000/unity/2023/02/08/URP.html" rel="alternate" type="text/html" title="URP" /><published>2023-02-08T07:00:00+09:00</published><updated>2023-02-08T07:00:00+09:00</updated><id>http://localhost:4000/unity/2023/02/08/URP</id><content type="html" xml:base="http://localhost:4000/unity/2023/02/08/URP.html"><![CDATA[<h2 id="urp">URP?</h2>
<hr />
<p>항상 유니티 vs 언리얼에서 유니티가 무시받던 것이 바로 그래픽 능력. 유니티에서 새로운 파이프라인을 만들어 제공했는데 기존에는 디폴트 파이프라인이었지만, 설정을 통해 새로운 파이프라인을 사용할 수 있다.<br /><br />
Universal Render Pipeline (URP): Unity에서 제작한 사전 빌드된 스크립터블 렌더 파이프라인<br /><br />
URP는 아티스트 친화적 워크플로를 통해 모바일, 고사양 콘솔, PC 등 다양한 플랫폼에서 최적화된 그래픽스를 쉽고 빠르게 구현하도록 도와준다.</p>

<h2 id="urp-설정">URP 설정</h2>
<hr />
<p><img src="/assets/img/Unity/URP_1.png" alt="image" /><br />
Window→Package Manager<br /><br />
<img src="/assets/img/Unity/URP_2.png" alt="image" /><br />
Packages를 Unity Registry로 변경 후 Universal RP를 찾아 install<br /><br />
<img src="/assets/img/Unity/URP_3.png" alt="image" /><br />
Packages 디렉터리에 Universal RP가 생긴것을 볼 수 있다<br /><br />
Render Pipeline을 기존 디폴트에서 URP로 변경해줘야한다.<br /><br />
<img src="/assets/img/Unity/URP_4.png" alt="image" /><br />
Create→Rendering→URP Asset (with Universal Renderer)<br /><br />
<img src="/assets/img/Unity/URP_5.png" alt="image" /><br />
두개의 파일이 생성된다.<br /><br />
두 파일 중 Universal Render Pipeline Asset을 적용시켜줘야한다.<br /><br />
<img src="/assets/img/Unity/URP_6.png" alt="image" /><br />
Project Settings→Graphics→Scriptable Render Pipeline Settings에 Universal Render Pipeline Asset을 연결해준다.</p>

<h2 id="material">Material</h2>
<hr />
<p><img src="/assets/img/Unity/URP_7.png" alt="image" /><br />
Material의 Shader가 Universal Render Pipeline/Lit으로 설정되어있다.<br /><br />
파이프라인이 변경되어 셰이더를 URP에 있는 것들만 사용해야 한다.</p>

<h2 id="shader">Shader</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>셰이더</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2D</td>
      <td>2D 프로젝트 개발시 사용</td>
    </tr>
    <tr>
      <td>Autodesk Interactive</td>
      <td>AutoDesk 응용 프로그램과 조정할 때 사용</td>
    </tr>
    <tr>
      <td>Nature</td>
      <td>Speed Tree에 특화된 셰이더 포함</td>
    </tr>
    <tr>
      <td>Particle</td>
      <td>이펙트 제작에 사용 (파티클 시스템)</td>
    </tr>
    <tr>
      <td>Baked Lit</td>
      <td>라이트 맵과 라이트 프로브를 통해 베이크된 조명만 필요한 스타일화 된 게임이나 앱에 사용<br /><br />물리적 기반 셰이딩을 사용하지 않으며 실시간 조명이 없어 실시관 관련 셰이더 키워브 및 변형이 셰이더 코드에서 제거되어 계산 속도가 빠르다<br /><br />미리 라이트 관련된 것들을 실시간으로 계산하지 않을때 사용</td>
    </tr>
    <tr>
      <td>Lit</td>
      <td>실제 표면을 사실적인 품질로 렌더링 시켜줌. 무거우며 디폴트로 설정되어있음</td>
    </tr>
    <tr>
      <td>Simple Lit</td>
      <td>성능이 좋지만 리얼한 셰이더 느낌이 아님, Lit을 사용하기엔 무겁고 Baked Lit을 할 줄 모른다면 사용</td>
    </tr>
    <tr>
      <td>Unlit</td>
      <td>전역 조명을 샘플링하는 옵션이 있는 조명없는 셰이더, Unity의 스톡 언릿 셰이더 대체</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="study" /><summary type="html"><![CDATA[Unity URP]]></summary></entry><entry><title type="html">Cinemachine</title><link href="http://localhost:4000/unity/2023/02/07/Cinemachine.html" rel="alternate" type="text/html" title="Cinemachine" /><published>2023-02-07T06:00:01+09:00</published><updated>2023-02-07T06:00:01+09:00</updated><id>http://localhost:4000/unity/2023/02/07/Cinemachine</id><content type="html" xml:base="http://localhost:4000/unity/2023/02/07/Cinemachine.html"><![CDATA[<h2 id="시네머신">시네머신?</h2>
<hr />
<p>영화 촬영을 하는 것처럼 씬을 촬영하여 게임 화면상에 비추어주는 유니티 패키지.<br /><br />
기본적으로 카메라 오브젝트를 생성하지 않고 가상 카메라를 이용.<br /><br />
가상 카메라는 원래 있는 카메라 오브젝트를 이용하여 여러 환경에서 비추어줄 씬을 보여주도록 도와줌.<br /><br />
가상 카메라는 서로에게 영향을 끼치지 않으며, 유니티 카메라에도 영향을 받지 않아 자유로운 카메라 구성이 가능.</p>

<h2 id="패키지-추가">패키지 추가</h2>
<hr />

<p><img src="/assets/img/Unity/Cinemachine_1.png" alt="image" /><br />
Window→Package Manager<br /><br />
<img src="/assets/img/Unity/Cinemachine_2.png" alt="image" /><br />
Packages를 Unity Registry로 변경 후 Cinemachine을 찾아 install<br /><br />
<img src="/assets/img/Unity/Cinemachine_3.png" alt="image" /><br />
Packages 디렉터리에 Cinemachine이 생긴것을 볼 수 있다<br /><br />
<img src="/assets/img/Unity/Cinemachine_4.png" alt="image" /><br />
Hierachy에서 시네머신 카메라를 생성할 수 있다.<br /><br /></p>

<h2 id="종류">종류</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>카메라</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Virtual Camera</td>
      <td>기본적인 카메라, 유니티 카메라를 조정하듯 자유롭게 활용 가능</td>
    </tr>
    <tr>
      <td>FreeLook Camera</td>
      <td>오브젝트를 중심으로 원형의 링을 생성하여 그 구간 안에서 타깃을 관찰하는 카메라</td>
    </tr>
    <tr>
      <td>Blend List Camera</td>
      <td>할당된 버추얼 카메라들을 정해진 블랜드 방식에 따라 순차적으로 전환하는 카메라</td>
    </tr>
    <tr>
      <td>State-Driven Camera</td>
      <td>타겟 애니메이션의 상태별로 활성화/비활성화 시킬 수 있는 카메라</td>
    </tr>
    <tr>
      <td>ClearShot Camera</td>
      <td>플레이어의 충돌/트리거 상태에 따라 활성화/비활성화 시킬 수 있는 카메라</td>
    </tr>
    <tr>
      <td>Dolly Camera</td>
      <td>트랙을 깔아 해당 트랙에 따라 움직이는 카메라, Dolly Track과 함께 사용</td>
    </tr>
    <tr>
      <td>Target Group Camera</td>
      <td>그룹으로 묶인 카메라들을 자동으로 계산해 한 화면에 보여주는 카메라</td>
    </tr>
    <tr>
      <td>Mixing Camera</td>
      <td>Child Camera Weight 값에 따라 활성화/비활성화 해주는 카메라</td>
    </tr>
    <tr>
      <td>2D Camera</td>
      <td>직교 뷰로 사용되는 카메라</td>
    </tr>
  </tbody>
</table>

<h2 id="프로퍼티-설명">프로퍼티 설명</h2>
<hr />
<p>💡 가장 기본적인 Virtual Camera의 설명<br />
<img src="/assets/img/Unity/Cinemachine_5.png" alt="image" /><br /><br />
Save During Play: 에디터 Play 중 내용을 변경해도 설정 저장<br /><br />
Priority: 카메라 우선도<br /><br />
Follow: 따라다닐 오브젝트<br /><br />
Look At: 바라볼 오브젝트<br /><br />
Standby Update: Live 상태가 아닌 카메라의 업데이트 빈도</p>
<ul>
  <li>Never: 항상</li>
  <li>Always: Live 일때만</li>
  <li>Round Robine: 정기적으로</li>
</ul>

<p>Transitions: 카메라 사이 이동시 씬 전환 효과<br /><br />
Body: 카메라의 위치<br /><br />
Aim: 카메라의 각도<br /></p>

<h2 id="body">Body</h2>
<hr />
<p><img src="/assets/img/Unity/Cinemachine_6.png" alt="image" /><br /><br />
Follow Offset: 카메라와 대상의 거리<br /><br />
Damping(제동): 값의 급격한 변화를 꺾어 부드럽게 이어주는 비율, 값이 커질 수록 부드러워져 민감도가 줄어듬</p>

<h2 id="aim">Aim</h2>
<hr />
<p><img src="/assets/img/Unity/Cinemachine_7.png" alt="image" /><br /><br />
Tracked Object Offset: 대상에서 얼마나 더 떨어진 곳에서 바라볼지 (y값을 늘리면 대상보다 높은 곳을 조준한다)<br /><br />
Damping: 회전 속도에 대한 제동값<br /><br />
Dead Zone: 데드존의 크기<br /><br />
Soft Zone: 소프트존의 크기<br /></p>

<h2 id="soft-zone-dead-zone">Soft Zone, Dead Zone</h2>
<hr />
<p><img src="/assets/img/Unity/Cinemachine_8.png" alt="image" /><br /><br />
<span style="color:red">
Dead Zone(데드존)
</span>: 대상이 데드존 내에서 움직이는 동안에는 카메라가 회전하지 않는다<br /><br />
<span style="color:blue">
Soft Zone(소프트존)
</span>: 대상이 소프트존 내에 있다면 카메라가 부드럽게 회전하여 대상이 데드존 안으로 들어가게 한다<br /><br />
<span style="color:yellow">
하드리밋
</span>: 소프트존보다 바깥에 있어 더 빠르고 격한 속도로 회전하며 대상이 데드존 안으로 들어가게 함<br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">데드존이 클 수록 화면은 느리고 부드럽게 움직이며, 데드존이 작을수록 화면은 빠르고 격하게 움직임</code></p>

<h2 id="테스트">테스트</h2>
<hr />
<p>오브젝트를 생성하여 상하좌우로 움직이는 코드를 구현한 후 시네머신의 Follow, Look At에 연결해주었다.<br />
<img src="/assets/img/Unity/Cinemachine_9.gif" alt="image" /><br /><br /></p>

<p>카메라가 회전하여 오브젝트가 데드존으로 들어가게 하는 것을 볼 수 있다.</p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="study" /><summary type="html"><![CDATA[Unity Cinemachine]]></summary></entry><entry><title type="html">Unity 플랫폼별 구분하여 작업</title><link href="http://localhost:4000/unity/2023/02/03/Different-for-each-Platform.html" rel="alternate" type="text/html" title="Unity 플랫폼별 구분하여 작업" /><published>2023-02-03T06:00:01+09:00</published><updated>2023-02-03T06:00:01+09:00</updated><id>http://localhost:4000/unity/2023/02/03/%20Different%20for%20each%20Platform</id><content type="html" xml:base="http://localhost:4000/unity/2023/02/03/Different-for-each-Platform.html"><![CDATA[<h2 id="플랫폼-의존-컴파일">플랫폼 의존 컴파일</h2>
<hr />
<p>유니티를 작업하다보면 플랫폼에 따라 다르게 동작해야하는 경우가 있다. 그럴때는 Unity의 <code class="language-plaintext highlighter-rouge">플랫폼 의존 컴파일</code> 기능을 이용하여 여러 플랫폼을 대응할 수 있다.<br /></p>

<h2 id="플랫폼에-따른-코드-구현">플랫폼에 따른 코드 구현</h2>
<hr />
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#if 심볼(플랫폼)
</span>    <span class="c1">// 코드 작성</span>
<span class="cp">#endif
</span></code></pre></div></div>
<p>이렇게 코드를 작성해 주면 해당 플랫폼에서만 동작하는 코드를 작성할 수 있다. Unity에 지정되어있는 심볼로 아래가 있다.<br />
<img src="/assets/img/Unity/Platform_1.png" alt="image" /><br /><br />
<a href="https://docs.unity3d.com/kr/current/Manual/PlatformDependentCompilation.html">링크-유니티 공식 문서</a><br /></p>

<h2 id="예시">예시</h2>
<hr />
<p><img src="/assets/img/Unity/Platform_2.png" alt="image" width="50%" height="50%" /><br />
플랫폼에 따라 화면에 보이는 Text가 다르게 변화하도록 코드를 작성한다.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
<span class="cp">#if UNITY_EDITOR                        // Unity Editor
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: Unity Editor"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Editor"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_STANDALONE_WIN                // Window
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: Window"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Window"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_STANDALONE_OSX                // macOS
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: OSX"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"OSX"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_IOS                           // IOS
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: IOS"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"IOS"</span><span class="p">);</span>
<span class="cp">#endif
#if UNITY_ANDROID                       // Android
</span>        <span class="n">printText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Platform: Android"</span><span class="p">;</span>
        <span class="n">Debug</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="s">"Android"</span><span class="p">);</span>
<span class="cp">#endif
</span>    <span class="p">}</span>
</code></pre></div></div>

<h2 id="실행결과">실행결과</h2>
<hr />
<p>Window로 빌드한 결과 잘 되는것을 볼 수 있다.<br />
<img src="/assets/img/Unity/Platform_3.png" alt="image" width="50%" height="50%" /><br /><br />
하지만 Unity Editor상에서도 똑같은 결과가 나오는 것을 확인 할 수 있다.<br />
<img src="/assets/img/Unity/Platform_4.png" alt="image" width="50%" height="50%" /><br /><br />
그 이유는 Build Setting중 Platform이 Window로 되어있기 때문에, Editor에서 실행되는 코드와 Window에서 실행되는 코드 둘 다 실행되기 때문이다.<br />
콘솔창을 확인해 보면 Editor, Window 둘다 출력되는 것을 볼 수 있다.<br />
<img src="/assets/img/Unity/Platform_5.png" alt="image" width="50%" height="50%" /><br /><br />
Platform을 Android로 변경한 후 다시 실행시켜보면 Android가 출력되는 것을 볼 수 있다.<br />
<img src="/assets/img/Unity/Platform_6.png" alt="image" width="50%" height="50%" /><br /><br />
<img src="/assets/img/Unity/Platform_7.png" alt="image" width="50%" height="50%" /></p>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="study" /><summary type="html"><![CDATA[Unity 플랫폼 의존 컴파일]]></summary></entry><entry><title type="html">Unity Photon 주요 기능</title><link href="http://localhost:4000/unity/2023/01/30/Photon.html" rel="alternate" type="text/html" title="Unity Photon 주요 기능" /><published>2023-01-30T06:00:01+09:00</published><updated>2023-01-30T06:00:01+09:00</updated><id>http://localhost:4000/unity/2023/01/30/Photon</id><content type="html" xml:base="http://localhost:4000/unity/2023/01/30/Photon.html"><![CDATA[<h2 id="photon의-개념">Photon의 개념</h2>
<hr />

<p><img src="/assets/img/Photon/Photon_1.png" alt="image" width="50%" height="50%" /><br />
Photon 연결할 때 App ID를 입력하고 연결하면 생기는 셋팅<br />
이 중 App ID가 같을 때는 같은 네트워크를 사용한다는 뜻<br /></p>
<ul>
  <li>포톤 서버에는 룸과 로비의 개념이 있음</li>
  <li>룸은 네트워크 게임을 실행할 수 있는 논리적인 공간</li>
  <li>룸에 입장해야만 해당 룸에 접속한 다른 유저와 통신이 가능</li>
  <li>로비에 입장하려면 로비 입장 함수를 호출해야 로비에 입장 가능</li>
  <li>로비는 현재 룸이 생성되었는지에 대한 정보를 수신받을 수 있음</li>
  <li>룸이 목록을 받아와 특정 룸에 입장이 가능</li>
</ul>

<h2 id="photon-통신을-위한-콜백함수">Photon 통신을 위한 콜백함수</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>함수 이름</th>
      <th>호출 조건</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>OnConnectedToMaster()</td>
      <td>포톤 서버에 접속 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnJoinedLobby()</td>
      <td>로비에 접속 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnJoinRandomFailed(short returnCode, string message)</td>
      <td>랜덤 룸 입장 실패했을 때 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnCreatedRoom()</td>
      <td>룸 생성이 완료된 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnJoinedRoom()</td>
      <td>룸에 입장한 후 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnDisconnected(DisconnectCause cause)</td>
      <td>연결이 끊겼을때 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnPlayerEnteredRoom(Player newPlayer)</td>
      <td>현재 룸에 새로운 유저가 들어왔을때 호출되는 콜백 함수</td>
    </tr>
    <tr>
      <td>OnPlayerLeftRoom(Player otherPlayer)</td>
      <td>현재 룸에 유저가 나갔을때 호출되는 콜백 함수</td>
    </tr>
  </tbody>
</table>

<h2 id="photon-주요-메소드-프로퍼티">Photon 주요 메소드, 프로퍼티</h2>
<hr />

<table>
  <thead>
    <tr>
      <th>이름</th>
      <th>종류</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>PhotonNetwork.AutomaticallySyncScene</td>
      <td>프로퍼티</td>
      <td>같은 룸의 유저들에게 자동으로 씬을 로딩할 것인지</td>
    </tr>
    <tr>
      <td>PhotonNetwork.GameVersion</td>
      <td>프로퍼티</td>
      <td>게임 접속 버전 ( 같은 버전의 유저끼리 접속 허용)</td>
    </tr>
    <tr>
      <td>PhotonNetwork.NickName</td>
      <td>프로퍼티</td>
      <td>객체의 닉네임</td>
    </tr>
    <tr>
      <td>PhotonNetwork.SendRate</td>
      <td>프로퍼티</td>
      <td>포톤 서버와 통신 횟수</td>
    </tr>
    <tr>
      <td>PhotonNetwork.ConnectUsingSettings()</td>
      <td>메소드</td>
      <td>서버 접속</td>
    </tr>
    <tr>
      <td>PhotonNetwork.JoinLobby()</td>
      <td>메소드</td>
      <td>로비 입장</td>
    </tr>
    <tr>
      <td>PhotonNetwork.JoinRandomRoom()</td>
      <td>메소드</td>
      <td>랜덤 매치메이킹</td>
    </tr>
    <tr>
      <td>PhotonNetwork.CreateRoom(“룸 이름”, 룸 속성(Default: null))</td>
      <td>메소드</td>
      <td>속성을 가진 룸 생성</td>
    </tr>
    <tr>
      <td>PhotonNetwork.JoinRoom(“룸 이름”)</td>
      <td>메소드</td>
      <td>해당 이름을 가진 룸에 입장</td>
    </tr>
    <tr>
      <td>PhotonNetwork.InLobby</td>
      <td>프로퍼티</td>
      <td>로비에 접속 되었는지</td>
    </tr>
    <tr>
      <td>PhotonNetwork.CurrentRoom</td>
      <td>프로퍼티</td>
      <td>현재 룸의 정보</td>
    </tr>
    <tr>
      <td>PhotonNetwork.InRoom</td>
      <td>프로퍼티</td>
      <td>룸에 접속 되었는지</td>
    </tr>
    <tr>
      <td>PhotonNetwork.Instantiate(“Prefab 이름”, position, rotation, 0)</td>
      <td>함수</td>
      <td>포톤 Instantiate</td>
    </tr>
  </tbody>
</table>

<h2 id="photon-view-스크립트">Photon View 스크립트</h2>
<hr />

<p>네트워크에 접속한 플레이어간 데이터를 송수신해주는 통신 모듈로, 동일한 룸에 입장한 다른 플레이어에게 자신의 위치와 회전 정보를 동기화 해주며, 특정한 데이터를 송수신 가능하며 네트워크 개체당 한개만 사용할 것을 권장. (네트워크 대역폭과 성능상의 이유로)<br />
<img src="/assets/img/Photon/Photon_2.png" alt="image" width="50%" height="50%" /><br /></p>

<p>Synchronization: 동기화 처리를 어떻게 할 것인지 기능에 따라 성능이 달라짐</p>

<table>
  <thead>
    <tr>
      <th>속성</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Off</td>
      <td>동기화 처리 X. RPC 호출만을 위한 PhotonView에 적합 (RPC: 원격 프로시저 호출 물리적으로 떨어져있는 다른 디바이스간의 함수를 호출하는 기능)</td>
    </tr>
    <tr>
      <td>Reliable Delta Compressed</td>
      <td>마지막 데이터가 변경되지 않았을 때 데이터 송신 X</td>
    </tr>
    <tr>
      <td>Unreliable</td>
      <td>패킷의 수신 여부를 확인 X</td>
    </tr>
    <tr>
      <td>Unreliable On Change</td>
      <td>UnReliable과 동일하며 변경사항이 발생했을 때만 송신</td>
    </tr>
  </tbody>
</table>

<h2 id="phton-transform-view-스크립트">Phton Transform View 스크립트</h2>
<hr />
<p><img src="/assets/img/Photon/Photon_3.png" alt="image" width="50%" height="50%" /><br />
플레이어의 위치, 회전값을 동기화하기 위한 모듈<br /><br />
Synchronize Options: 체크되어있는 옵션을 동기화해라<br />
Use Local: 동기화하는 데이터가 Local 기준인지<br /></p>

<h2 id="photon-animator-view">Photon Animator View</h2>
<hr />
<p><img src="/assets/img/Photon/Photon_4.png" alt="image" width="50%" height="50%" /><br />
애니메이터 컴포넌트를 동기화해주는 모듈<br />
애니메이터 정보를 읽어 레이어와 파라미터 값을 자동으로 동기화 해줌<br /><br />
Synchronize Layer Weights 애니메이션 동기화 횟수인것 같음<br /></p>

<table>
  <thead>
    <tr>
      <th>속성</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Disabled</td>
      <td>안함</td>
    </tr>
    <tr>
      <td>Discrete</td>
      <td>이산</td>
    </tr>
    <tr>
      <td>Continuous</td>
      <td>연속</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Mindol</name></author><category term="Unity" /><category term="unity" /><category term="network" /><summary type="html"><![CDATA[Photon-PUN]]></summary></entry><entry><title type="html">[Flutter] - UI</title><link href="http://localhost:4000/flutter/2023/01/29/Flutter-%EA%B8%B0%EC%B4%88-UI.html" rel="alternate" type="text/html" title="[Flutter] - UI" /><published>2023-01-29T06:00:01+09:00</published><updated>2023-01-29T06:00:01+09:00</updated><id>http://localhost:4000/flutter/2023/01/29/Flutter%20%EA%B8%B0%EC%B4%88-UI</id><content type="html" xml:base="http://localhost:4000/flutter/2023/01/29/Flutter-%EA%B8%B0%EC%B4%88-UI.html"><![CDATA[<h2 id="시작하기-전">시작하기 전…</h2>
<hr />
<p><img src="/assets/img/Flutter/flutter_UI_1.png" alt="image" width="50%" height="50%" /><br />
클래스에 커서를 올려서 확인해보면 nullsafety가 되어있는 필드들은 꼭 필요하지 않다는것 같음.<br />
(근데 나머진 다 디폴트로 들어가있는데…? 아직 잘 모르겠음)<br /></p>

<h2 id="color">Color</h2>
<hr />
<p>Colors.색상 다음 .을 입력하면 색조를 고를 수 있음 (얼마나 어두워질것인지)<br />
<img src="/assets/img/Flutter/flutter_UI_2.png" alt="image" width="50%" height="50%" /><br />
Color(0xFF색상코드)로 색상지정이 가능<br />
<img src="/assets/img/Flutter/flutter_UI_3.png" alt="image" width="50%" height="50%" /><br />
색상.Opacity()로 투명도를 조정할 수 있다<br />
<img src="/assets/img/Flutter/flutter_UI_4.png" alt="image" width="50%" height="50%" /><br /></p>

<h2 id="column">Column</h2>
<hr />
<p>자식으로 다른 위젯을 넣으려면 Column 클래스 이용<br />
하나의 Column에 두개의 Text를 넣는 예제<br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">home:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">backgroundColor:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">black</span><span class="p">,</span>
        <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
      <span class="p">),</span>
</code></pre></div></div>
<p>결과<br />
<img src="/assets/img/Flutter/flutter_UI_5.png" alt="image" width="50%" height="50%" /><br />
너무 위에 있어 아래로 좀 내려야 할듯함 그럴때 사용하는게 SizedBox<br /></p>

<h2 id="sizedbox">SizedBox</h2>
<hr />
<p>크기가 있는 박스, 공간을 만들때 사용</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">SizedBox</span><span class="p">(</span>
              <span class="nl">height:</span> <span class="mi">80</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
</code></pre></div></div>
<p>Column안에 SizedBox의 높이를 80으로 지정해주고 두개의 Text를 넣어준 예제<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_6.png" alt="image" width="50%" height="50%" /><br />
위에 SizedBox가 생긴 후 Text가 그려지는것을 볼 수 있다<br />
이제 텍스트를 오른쪽으로 옮겨보자<br /></p>

<h2 id="alignment정렬">Alignment(정렬)</h2>
<hr />
<p>Row의 MainAxisAlignment은 수평방향이지만<br />
Column의 MainAxisAlignment은 수직방향 <br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">home:</span> <span class="n">Scaffold</span><span class="p">(</span>
        <span class="nl">backgroundColor:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">black</span><span class="p">,</span>
        <span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">SizedBox</span><span class="p">(</span>
              <span class="nl">height:</span> <span class="mi">80</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">end</span><span class="p">,</span> <span class="c1">// &lt;- Row의 정렬 속성 변경</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
      <span class="p">),</span>
</code></pre></div></div>
<p>Row클래스의 mainAxisAlignment를 start에서 end로 변경해주었다<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_7.png" alt="image" width="50%" height="50%" /><br />
이제 Text의 크기를 변경해줄 것이다<br /></p>

<h2 id="text">Text</h2>
<hr />
<p>첫번째 텍스트의 크기를 더 크고, 진하게 할 것이다<br /></p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">body:</span> <span class="n">Column</span><span class="p">(</span>
          <span class="nl">children:</span> <span class="p">[</span>
            <span class="n">SizedBox</span><span class="p">(</span>
              <span class="nl">height:</span> <span class="mi">80</span><span class="p">,</span>
            <span class="p">),</span>
            <span class="n">Row</span><span class="p">(</span>
              <span class="nl">mainAxisAlignment:</span> <span class="n">MainAxisAlignment</span><span class="o">.</span><span class="na">end</span><span class="p">,</span>
              <span class="nl">children:</span> <span class="p">[</span>
              <span class="n">Column</span><span class="p">(</span>
                  <span class="nl">children:</span> <span class="p">[</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Hey, Mindol'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="nl">fontSize:</span> <span class="mi">38</span><span class="p">,</span>
                        <span class="nl">fontWeight:</span> <span class="n">FontWeight</span><span class="o">.</span><span class="na">w600</span><span class="p">,</span>
                      <span class="p">),</span>
                    <span class="p">),</span>
                    <span class="n">Text</span><span class="p">(</span>
                      <span class="s">'Welcom Back'</span><span class="p">,</span>
                      <span class="nl">style:</span> <span class="n">TextStyle</span><span class="p">(</span>
                        <span class="nl">color:</span> <span class="n">Colors</span><span class="o">.</span><span class="na">white</span><span class="p">,</span>
                        <span class="p">),</span>
                    <span class="p">),</span>
                  <span class="p">],</span>
                <span class="p">)</span>
              <span class="p">]</span>
            <span class="p">)</span>
          <span class="p">],</span>
        <span class="p">)</span>
</code></pre></div></div>
<p>fontSize로 폰트의 크기를 정해고, fontWeight로 더 진하게 해줄 것이다<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_8.png" alt="image" width="50%" height="50%" /><br />
현재 텍스트는 가운데 정렬을 하고있지만 모든 텍스트를 오른쪽에 붙이고 싶다<br />
하지만 Column의 MainAxis는 수직이고, CrossAxis는 수평이다(Row와 반대)<br />
Column 클래스의 crossAxisAlignment값을 CrossAxisAlignment.end로 변경<br /><br />
결과<br />
<img src="/assets/img/Flutter/flutter_UI_9.png" alt="image" width="50%" height="50%" /><br />
잘 정렬되는 것을 볼 수 있다.<br />
하지만 너무 오른쪽에 붙어 있는것 같아 공백을 조금 주고 싶다<br /></p>

<h2 id="padding">Padding</h2>
<hr />
<p>지금까지 만들었던 Column을 Padding으로 감싸서 전체적으로 공백을 주려한다.<br />
padding을 사용할때는 padding을 명시해야하는데,<br />
padding클래스에<code class="language-plaintext highlighter-rouge">padding: EdgeInsets</code>를 입력하면 알 수 있다.<br /></p>
<ul>
  <li>EdgeInsets.all(): 값만큼 화면의 상하좌우 모두 padding을 줌<br /></li>
  <li>EdgeInsets.only(): 상하좌우 중 한 가지를 구체적으로 정할 수 있음<br /></li>
  <li>EdgeInsets.symmetric(): 수직 padding과 수평 padding을 지정할 수 있음<br /></li>
</ul>]]></content><author><name>Mindol</name></author><category term="Flutter" /><category term="Flutter" /><category term="Dart" /><summary type="html"><![CDATA[플러터의 기초 공부]]></summary></entry><entry><title type="html">[Flutter] - Widget</title><link href="http://localhost:4000/flutter/2023/01/28/Flutter%EA%B8%B0%EC%B4%88-Widget.html" rel="alternate" type="text/html" title="[Flutter] - Widget" /><published>2023-01-28T06:00:01+09:00</published><updated>2023-01-28T06:00:01+09:00</updated><id>http://localhost:4000/flutter/2023/01/28/Flutter%EA%B8%B0%EC%B4%88-Widget</id><content type="html" xml:base="http://localhost:4000/flutter/2023/01/28/Flutter%EA%B8%B0%EC%B4%88-Widget.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>Flutter는 게임엔진처럼 동작, 엔진이 화면 상의 모든 픽셀을 그려줌. 게임 엔진은 무언가를 렌더링할 때 호스트 플랫폼을 사용하지 않고 스스로 그래픽을 그림, Flutter도 같음.</p>

<h2 id="react-native-vs-flutter">React Native vs Flutter</h2>
<hr />
<p>React Native: 네이티브 앱 운영체제 상에서 가능한 위젯을 사용하고 싶을 때, 호스트 운영체제가 만들어주는 위젯을 사용하는 크로스플랫폼 어플리케이션을 만들 때<br /><br />
Flutter: 세밀한 디자인 요구사항이 들어가며, 요소들이나 애니메이션들을 전부 커스터마이징 해야할 때 (ios, android 앱처럼이 아닌, 자체의 디자인으로 이루어진 어플리케이션을 만들 때)</p>

<h2 id="widget">Widget</h2>
<hr />
<p>Widget(위젯)</p>
<ul>
  <li>Flutter: 앱의 UI를 만드는 것</li>
  <li>프로그래밍: class 생성</li>
</ul>

<p>Widget을 레고 블럭을 조립한다고 생각, Flutter에 있는 모든 건 Widget, Widget을 합치는 방식으로 앱을 제작해나감.<br /><br />
공식 위젯: <a href="https://docs.flutter.dev/development/ui/widgets">flutter Widget 카탈로그</a>에 가면 애니메이션, 레이아웃 등 여러 위젯을 볼 수 있음.<br /><br />
클래스를 생성할때 flutter SDK에 있는 3개의 core Widget중 하나를 상속받아야함.<br />
StatelessWidget: 가장 기초적인 위젯으로 바꿔주는 클래스로 그냥 화면에 무언가 띄어주는 용도</p>

<h2 id="build-method">build Method</h2>
<hr />
<p>모든 위젯은 build 메소드를 구현해야 함<br /><br />
build 메소드의 역할: Flutter가 실행하게 되는데, build 메소드가 반환하는걸 화면에서 보여줌<br />
(위젯의 UI를 만드는 것)</p>

<h2 id="root-widget">root Widget</h2>
<hr />
<p>앱의 시작 위젯으로 모든 위젯의 시작점<br />
앱의 root Widget은 두 개의 옵션 중 하나를 반환해야 함</p>
<ul>
  <li>material: 구글의 디자인 시스템</li>
  <li>cupertino:  애플의 디자인 시스템</li>
</ul>

<p>🤔 하지만 우리는 구글, 애플의 디자인이 아닌 우리만의 디자인을 만들고 싶은데 왜 material, cuperino를 반환해야 하는 걸까?<br /><br />
디자인 시스템을 사용해도 android, ios의 앱처럼 보이진 않지만 root Widget이여서 시작점을 선택하는 것으로, 기본 UI 설정과 같은 재료들을 선택하는 것.<br />
(하지만 Flutter는 구글이 제작했기에 material 앱 스타일이 cuperino 스타일보다 보기 좋다함 😅)</p>

<h2 id="scaffold">scaffold</h2>
<hr />
<p>Flutter는 하나의 개발 규칙이 있는데, 화면이 scaffold를 가져야하는 것<br /><br />
scaffold: 화면의 구성 및 구조에 관한 것들을 가지고 있는 위젯, 화면의 구조를 제공하며,<br />
모바일 앱의 모든 화면은 scaffold가 필요함<br /><br />
scaffold의 기능: navigation bar 구현, bottom tab bar, 화면 중앙 정렬 등</p>

<h2 id="home">home</h2>
<hr />
<p>앱의 home에 있을 때 무엇을 보여줄지 정하는 프로퍼티로 home안의 위젯을 구성하면 됨</p>

<h2 id="구성-요소">구성 요소</h2>
<hr />
<p>클래스에 커서를 올려 놓으면 클래스의 구성이 나오는데, 그것으로 무엇을 할 수 있는지 유추해 볼 수 있음, 자주 사용하도록 하자</p>]]></content><author><name>Mindol</name></author><category term="Flutter" /><category term="Flutter" /><category term="Dart" /><summary type="html"><![CDATA[플러터의 기초 공부]]></summary></entry><entry><title type="html">[jekyll] - markdown파일로 포스팅</title><link href="http://localhost:4000/web/2023/01/26/markdown%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8C%85.html" rel="alternate" type="text/html" title="[jekyll] - markdown파일로 포스팅" /><published>2023-01-26T06:00:01+09:00</published><updated>2023-01-26T06:00:01+09:00</updated><id>http://localhost:4000/web/2023/01/26/markdown%EC%9D%84%20%EC%9D%B4%EC%9A%A9%ED%95%9C%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%ED%8F%AC%EC%8A%A4%ED%8C%85</id><content type="html" xml:base="http://localhost:4000/web/2023/01/26/markdown%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8C%85.html"><![CDATA[<h2 id="markdown이란">Markdown이란?</h2>
<hr />
<p>마크다운(Markdown)은 일반 텍스트 기반의 경량 마크업 언어.<br /><br />
일반 텍스트로 서식이 있는 문서를 작성하는 데 사용되며, 일반 마크업 언어에 비해 문법이 쉽고 간단한 것이 특징이다.<br /></p>

<h2 id="포스팅을-하기-전">포스팅을 하기 전</h2>
<hr />
<p>Mardown을 지원하는 에디터를 준비해야합니다, 나는 Visual Studio Code를 사용중.</p>

<h2 id="_posts">_posts</h2>
<hr />
<p>블로그 디렉토리를 들어가면 대략적으로 이런 형식으로 구성.<br /><br />
<img src="/assets/img/jekyll/jekyll_post_1.png" alt="image" width="50%" height="50%" /><br />
포스팅을 하기위해서는 _posts 디렉터리에 markdown파일을 만들어야하며. 만약 _posts 디렉터리가 존재하지 않을 시 _posts라는 디렉터리를 생성.<br />
<code class="language-plaintext highlighter-rouge">모든 포스트 파일은 _posts 디렉터리 내 위치</code></p>

<h2 id="markdown-파일-생성">Markdown 파일 생성</h2>
<hr />
<p>마크다운 파일 생성. 파일 명은 <code class="language-plaintext highlighter-rouge">yyyy-mm-dd-포스트 제목.md</code> 형식으로 만들어야 함.
<img src="/assets/img/jekyll/jekyll_post_2.png" alt="image" width="100%" height="100%" /><br /></p>

<h2 id="머릿말front-matter-작성">머릿말(Front-Matter) 작성</h2>
<hr />
<p>준비했던 에디터로 해당 파일을 열어준 후, 맨 위에 아래처럼 작성한다.</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">포스팅</span><span class="nv"> </span><span class="s">이름"</span>
<span class="na">excerpt</span><span class="pi">:</span> <span class="s2">"</span><span class="s">소개글"</span>
<span class="na">categories</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Category1</span><span class="pi">]</span>
<span class="na">tag</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">tag1</span><span class="pi">,</span> <span class="nv">tag2</span><span class="pi">,</span> <span class="nv">tag3</span><span class="pi">]</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2023-01-26 00:00:00 +0300</span>
<span class="nn">---</span>
</code></pre></div></div>
<p>머릿말은 두개의 <code class="language-plaintext highlighter-rouge">---</code> 사이에 영역을 구분해줘야 한다.<br /><br />
title: 포스트의 제목을 큰 따옴표로 적어 준다. title을 적어주지 않을 시, 생성한 파일의 포스트 제목 부분이 제목으로 업로드 된다.<br /><br />
excerpt: 포스트 목록에 보여지는 간단한 소개글.<br />
<img src="/assets/img/jekyll/jekyll_post_3.png" alt="image" width="20%" height="20%" /><br /><br />
categories: 포스트의 카테고리<br /><br />
tags: 카테고리와의 차이로 카테고리는 sub url이 붙는 페이지가 있지만 태그는 없다, 카테고리보다 좀 더 세부적으로 나눌 수 있다.<br /><br />
date: 포스팅 날짜</p>

<h2 id="포스트-내용-확인">포스트 내용 확인</h2>
<hr />
<p>나는 포스트 내용을 확인할 때 두가지 방법을 사용한다.<br /><br />
첫째로 Visual Studio Code에서 지원하는 Preview기능으로, 마크다운 파일의 내용을 확인할 수 있다.<br />
<img src="/assets/img/jekyll/jekyll_post_4.png" alt="image" width="100%" height="100%" /><br />
에디터의 상단 UI중 빨간 네모 버튼을 눌러주면<br />
<img src="/assets/img/jekyll/jekyll_post_5.png" alt="image" width="50%" height="50%" /><br />
이렇게 마크다운 형식의 파일 내용을 확인할 수 있다.<br /><br />
두번째로 로컬 서버를 열어 블로그에 적용될 모습을 확인하는 방법이다.<br />
cmd로 블로그 디렉터리로 이동 후 <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>명령어를 입력 하면 로컬 환경에서 jekyll 서버를 가동할 수 있다.<br />
url에 <code class="language-plaintext highlighter-rouge">127.0.0.1:4000</code>이나 <code class="language-plaintext highlighter-rouge">localhost:4000</code>을 입력하여 블로그에 접속할 수 있다.<br />
<img src="/assets/img/jekyll/jekyll_post_6.png" alt="image" width="50%" height="50%" /><br /></p>

<h2 id="간단한-markdown-문법">간단한 Markdown 문법</h2>
<hr />
<p><code class="language-plaintext highlighter-rouge">#</code>,<code class="language-plaintext highlighter-rouge">##</code>,<code class="language-plaintext highlighter-rouge">###</code>: HTML의 <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code>,<code class="language-plaintext highlighter-rouge">&lt;h2&gt;</code>,<code class="language-plaintext highlighter-rouge">&lt;h3&gt;</code> 태그와 같다 주로 하나의 소제목이나,<br />
어떠한 글을 강조할 때 사용한다<br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">[text](url)</code>: HTML의 <code class="language-plaintext highlighter-rouge">&lt;a href:"url"&gt;text&lt;/a&gt;</code>와 같은 역할을 한다.<br />
text에 링크를 걸 수 있다.<br />
주로 하이퍼링크나, 파일 다운로드에 사용된다.<br />
ex) <a href="https://hhh57463.github.io">블로그주소</a><br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">![image](이미지 파일 위치)</code>: 이미지를 삽입할 때 사용한다.<br />
나는 블로그 디렉터리 내의 assets파일 내<br />
img디렉터리를 생성하여 이미지를 관리한다.<br />
<code class="language-plaintext highlighter-rouge">![image](이미지 파일){: width="50%" height="50%"}</code><br />
이런식으로 이미지의 크기를 조절할 수 있다. (위의 예시는 이미지 크기 50%)<br /><br /></p>

<p><code class="language-plaintext highlighter-rouge">+ 내용</code>, <code class="language-plaintext highlighter-rouge">- 내용</code>: HTML의 <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> 태그와 같은 역할, 주로 리스트를 표시할 때 사용한다.<br /></p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sb">` `</span>: 두개의 <span class="err">`</span> 사이의 어떠한 텍스트를 작성하면 해당 텍스트를 강조할 수 있다
</code></pre></div></div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">: 두 개의 ``` 사이를 코드블럭으로 만든다.
</span><span class="sb">첫 ```다음 언어 이름을 적으면 해당 언어의 코드블럭으로 만든다.
</span></code></pre></div></div>
<p>```python을 사용한 예시</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>

<span class="k">def</span> <span class="nf">mul</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>

<span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>: 줄바꿈 태그, Enter키로 2칸의 공백을 만들면 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>로 간주된다.<br /><br /></p>

<p>💡 마크다운 내에서는 이모지를 사용할 수 있으며, HTML의 태그를 사용할 수 있다.<br />
나는 주로 <a href="https://www.emojiengine.com/ko/">링크</a>에서 이모지를 가져와 사용한다.<br /></p>]]></content><author><name>Mindol</name></author><category term="web" /><category term="jekyll" /><category term="web" /><category term="markdown" /><category term="github" /><summary type="html"><![CDATA[마크다운파일을 이용한 블로그 포스팅]]></summary></entry><entry><title type="html">ios::sync_with_stdio(false), cin.tie(0)</title><link href="http://localhost:4000/study/2023/01/12/%EA%B3%B5%EB%B6%80-%EB%B0%B1%EC%A4%80-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC-%ED%95%B4%EA%B2%B0.html" rel="alternate" type="text/html" title="ios::sync_with_stdio(false), cin.tie(0)" /><published>2023-01-12T06:00:01+09:00</published><updated>2023-01-12T06:00:01+09:00</updated><id>http://localhost:4000/study/2023/01/12/%5B%EA%B3%B5%EB%B6%80%5D%EB%B0%B1%EC%A4%80%20%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC%20%ED%95%B4%EA%B2%B0</id><content type="html" xml:base="http://localhost:4000/study/2023/01/12/%EA%B3%B5%EB%B6%80-%EB%B0%B1%EC%A4%80-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC-%ED%95%B4%EA%B2%B0.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>C++ 공부중에 발견한 코드</p>

<h1 id="시간초과">시간초과</h1>
<hr />
<p>알고리즘 공부중에 코드마다</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</code></pre></div></div>
<p>가 있는 것을 보았는데, 궁금해서 검색해봤다.<br /><br /></p>

<p>보통 백준, 프로그래머스처럼 온라인 저지 사이트에서 C++을 이용하여 알고리즘 문제를 풀 때 시간초과 방지를 위해 사용한다.<br /><br /></p>

<p>C++에서는 기존 입출력으로 cin, cout을 사용하는데, 시간초과가 발생하는 경우가 있다.<br /><br /></p>

<p>그럴때 사용하는데, 이유로 입출력 양이 굉장히 많아지면 입출력하는데 소모시간이 많아져 시간초과가 발생한다.<br /><br />
📚 위의 코드를 사용하면 입출력 속도가 빨라진다 한다.</p>
<h2 id="iossync_with_stdiofalse">ios::sync_with_stdio(false)</h2>
<hr />
<h3 id="c와-c-표준-stream의-동기화를-비활성화하는-코드">C와 C++ 표준 stream의 동기화를 비활성화하는 코드<br /><br /></h3>

<p>동기화가 활성화 되어있으면 C스타일과 C++스타일의 입출력을 혼합해도 문제가 없다, printf, scanf와 cout, cin을 같이 사용해도 문제가 없는 것이다.<br /><br /></p>

<p>하지만 <code class="language-plaintext highlighter-rouge">ios::sync_with_stdio(false)</code>를 작성하면 C스타일과 C++스타일을 혼합하여 사용할 수 없는 대신, <code class="language-plaintext highlighter-rouge">C++스타일 코드만 사용하면 기존의 동기화 과정에 필요했던 시간이 절약되어 입출력 속도가 빨라지는 효과가 있다.</code><br /><br /></p>

<p>알고리즘 문제를 풀 때는 동기화는 필요없고 시간 절약이 우선이니, <code class="language-plaintext highlighter-rouge">ios::sync_with_stdio(false)</code>를 사용하여 입출력 시간을 절약하는 것이다<br /><br /></p>

<p>하지만 동기화된 C++버퍼의 경우 thread-safe하기 때문에 모든 IO의 순서가 예상한 것과 정확히 일치함을 보장할 수 있지만 <code class="language-plaintext highlighter-rouge">ios::sync_with_stdio(false);</code>를 사용하면 동기화가 비활성화 됐기 때문에 멀티 쓰레드 환경에서는 출력 순서를 보장할 수 없다.<br /><br />
thread-safe는 운영체제에서 mutex나 세마포어 등으로 동시 접근을 막는 것과 같이, 여러 쓰레드가 동시 접근해도 안전하다는 의미<br /><br /></p>

<p>그리고 C스타일의 printf, scanf, putchar, getchar 등을 같이 사용하면 안된다.<br /></p>
<h2 id="cintie0">cin.tie(0)</h2>
<hr />
<h3 id="cin과-cout의-묶음을-풀어준다">cin과 cout의 묶음을 풀어준다.<br /><br /></h3>

<p>아래의 코드가 있다고 생각해보면</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"이름을 입력해 주세요 </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">name</span><span class="p">;</span>
</code></pre></div></div>
<p>평소에는 cin과 cout이 묶여 있어 “이름을 입력해 주세요 \n”가 먼저 출력된 후 이름을 입력할 수 있다. <code class="language-plaintext highlighter-rouge">cin.tie(0)</code>나 <code class="language-plaintext highlighter-rouge">cin.tie(null)</code> 코드를 추가해 주면, “이름을 입력해 주세요 \n”가 출력되기 전에 이름을 입력할  수 있다.<br /><br />
<code class="language-plaintext highlighter-rouge">내부적으로 cin과 cout을 묶어주는 과정을 수행하지 않기 때문에 시간이 절약된다.</code></p>

<p>물론 이름을 입력해달라는 문구가 나오기 전에 입력을 할 수 있는 것은 이상하지만, 알고리즘 문제를 풀 때는 크게 상관이 없고, 입출력 시간을 절약할 수 있기 때문에 <code class="language-plaintext highlighter-rouge">cin.tie(0)</code>을 많이 사용한다.</p>]]></content><author><name>Mindol</name></author><category term="Study" /><category term="study" /><category term="cpp" /><summary type="html"><![CDATA[백준 C++ 시간초과 해결]]></summary></entry><entry><title type="html">Dart 기초 - 클래스</title><link href="http://localhost:4000/dart/2023/01/10/Dart-%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4.html" rel="alternate" type="text/html" title="Dart 기초 - 클래스" /><published>2023-01-10T06:00:01+09:00</published><updated>2023-01-10T06:00:01+09:00</updated><id>http://localhost:4000/dart/2023/01/10/Dart%20%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4</id><content type="html" xml:base="http://localhost:4000/dart/2023/01/10/Dart-%EA%B8%B0%EC%B4%88-%ED%81%B4%EB%9E%98%EC%8A%A4.html"><![CDATA[<h1 id="tmi">TMI</h1>
<hr />
<p>Flutter를 공부하기 위한 Dart 공부</p>

<h1 id="클래스">클래스</h1>
<hr />
<p>flutter는 클래스로 이루어져있음</p>

<h2 id="클래스-선언">클래스 선언</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'민돌'</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="객체-생성">객체 생성</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">player1</span> <span class="o">=</span> <span class="n">Player</span><span class="p">();</span>
  <span class="n">Player</span> <span class="n">player2</span> <span class="o">=</span> <span class="n">Player</span><span class="p">();</span>

  <span class="n">player1</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'mindol'</span><span class="p">;</span>
  <span class="n">player2</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'민돌2'</span><span class="p">;</span>

  <span class="n">print</span><span class="p">(</span><span class="n">player1</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">print</span><span class="p">(</span><span class="n">player2</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">player1</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
  <span class="n">player2</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
<span class="c1">// 결과</span>
<span class="n">mindol</span>
<span class="err">민돌</span><span class="mi">2</span>
<span class="n">Hi</span> <span class="n">my</span> <span class="n">name</span> <span class="k">is</span> <span class="n">mindol</span>
<span class="n">Hi</span> <span class="n">my</span> <span class="n">name</span> <span class="k">is</span> <span class="err">민돌</span><span class="mi">2</span>
<span class="n">Exited</span>
</code></pre></div></div>

<h2 id="생성자">생성자</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kd">late</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kd">late</span> <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">(</span><span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">xp</span><span class="p">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="n">xp</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">player1</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="s">'mindol'</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
  <span class="n">Player</span> <span class="n">player2</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="s">'민돌2'</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>

  <span class="n">print</span><span class="p">(</span><span class="n">player1</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">print</span><span class="p">(</span><span class="n">player2</span><span class="o">.</span><span class="na">name</span><span class="p">);</span>
  <span class="n">player1</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
  <span class="n">player2</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>기본 생성자 코드는 이렇지만 dart에서는 더 나은 방법을 추천</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">);</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>생성자의 매개변수를 this로 지정해주면 선언 순서에 따른 변수 지정이 가능<br />
(첫번째 매개변수는 name으로, 두번째 매개변수는 xp로)</p>

<h2 id="named-constructor-parameters">Named Constructor Parameters</h2>
<hr />
<p>함수에서 Named Parameter를 지정했던 것처럼 class에서도 Named Parameter를 지정할 수 있음</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">player1</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'mindol'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">100</span><span class="p">);</span>
  <span class="n">Player</span> <span class="n">player2</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌2'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>또다른 생성자 방법</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">,</span> <span class="n">age</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="p">,});</span>

  <span class="n">Player</span><span class="o">.</span><span class="na">CreateBluePlayer</span><span class="p">({</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,})</span> <span class="o">:</span> 
	<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'blue'</span><span class="p">;</span>

  <span class="n">Player</span><span class="o">.</span><span class="na">CreateRedPlayer</span><span class="p">({</span><span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">int</span> <span class="n">age</span><span class="p">,})</span> <span class="o">:</span> 
	<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'red'</span><span class="p">;</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">BluePlayer</span> <span class="o">=</span> <span class="n">Player</span><span class="o">.</span><span class="na">CreateBluePlayer</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">25</span><span class="p">);</span>
  <span class="n">Player</span> <span class="n">RedPlayer</span> <span class="o">=</span> <span class="n">Player</span><span class="o">.</span><span class="na">CreateBluePlayer</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌2'</span><span class="p">,</span> <span class="nl">age:</span> <span class="mi">25</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="클래스-프로퍼티에-jsondata-셋팅">클래스 프로퍼티에 JsonData 셋팅</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="kt">Map</span><span class="p">&lt;</span><span class="kt">String</span><span class="p">,</span> <span class="kd">dynamic</span><span class="p">&gt;</span> <span class="n">playerJson</span><span class="p">)</span> <span class="o">:</span> 
	<span class="n">name</span> <span class="o">=</span> <span class="n">playerJson</span><span class="p">[</span><span class="s">'name'</span><span class="p">],</span> <span class="n">xp</span> <span class="o">=</span> <span class="n">playerJson</span><span class="p">[</span><span class="s">'xp'</span><span class="p">],</span> <span class="n">team</span> <span class="o">=</span> <span class="n">playerJson</span><span class="p">[</span><span class="s">'team'</span><span class="p">];</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">apiData</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="s">"name"</span> <span class="o">:</span> <span class="s">"민돌"</span><span class="p">,</span>
      <span class="s">"team"</span> <span class="o">:</span> <span class="s">"red"</span><span class="p">,</span>
      <span class="s">"xp"</span> <span class="o">:</span> <span class="mi">0</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="s">"name"</span> <span class="o">:</span> <span class="s">"민돌2"</span><span class="p">,</span>
      <span class="s">"team"</span> <span class="o">:</span> <span class="s">"blue"</span><span class="p">,</span>
      <span class="s">"xp"</span> <span class="o">:</span> <span class="mi">0</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="s">"name"</span> <span class="o">:</span> <span class="s">"민돌3"</span><span class="p">,</span>
      <span class="s">"team"</span> <span class="o">:</span> <span class="s">"green"</span><span class="p">,</span>
      <span class="s">"xp"</span> <span class="o">:</span> <span class="mi">0</span>
    <span class="p">}</span>
  <span class="p">];</span>

	<span class="c1">// foreach문 List.forEach((변수){코드});</span>
  <span class="n">apiData</span><span class="o">.</span><span class="na">forEach</span><span class="p">((</span><span class="n">JsonData</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="n">player</span> <span class="o">=</span> <span class="n">Player</span><span class="o">.</span><span class="na">fromJson</span><span class="p">(</span><span class="n">JsonData</span><span class="p">);</span>
    <span class="n">player</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="cascade-notation">Cascade Notation</h2>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">mindol</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1200</span><span class="p">,</span> <span class="nl">team:</span> <span class="s">'read'</span><span class="p">);</span>
  <span class="n">mindol</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'mindol'</span><span class="p">;</span>
  <span class="n">mindol</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">120000</span><span class="p">;</span>
  <span class="n">mindol</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'blue'</span><span class="p">;</span>
	<span class="n">mindol</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>는</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="kt">String</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">mindol</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1200</span><span class="p">,</span> <span class="nl">team:</span> <span class="s">'read'</span><span class="p">)</span>
  <span class="p">.</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">'mindol'</span>
  <span class="p">.</span><span class="o">.</span><span class="na">xp</span> <span class="o">=</span> <span class="mi">120000</span>
  <span class="p">.</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="s">'blue'</span>
	<span class="p">.</span><span class="o">.</span><span class="na">hello</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>와 같은 역할이다<br />
💡 ..name,  ..xp, ..team의 맨 앞에 붙는 .은 객체를 가르킴</p>

<h3 id="enum">Enum</h3>
<hr />
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">enum</span> <span class="n">Team</span> <span class="p">{</span> <span class="n">red</span><span class="p">,</span> <span class="n">blue</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span><span class="p">{</span>
  <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">xp</span><span class="p">;</span>
  <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>

  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">xp</span><span class="p">,</span> <span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">team</span><span class="p">});</span>

  <span class="kt">void</span> <span class="n">hello</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="n">mindol</span> <span class="o">=</span> <span class="n">Player</span><span class="p">(</span><span class="nl">name:</span> <span class="s">'민돌'</span><span class="p">,</span> <span class="nl">xp:</span> <span class="mi">1200</span><span class="p">,</span> <span class="nl">team:</span> <span class="n">Team</span><span class="o">.</span><span class="na">red</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="추상화-메소드-abstract-method">추상화 메소드 (abstract method)</h2>
<hr />
<p>추상화 클래스 특징<br /></p>
<ul>
  <li>추상화 클래스로는 객체를 생성할 수 없음</li>
  <li>추상화 클래스는 상속 받은 클래스들이 직접 구현해야하는 메소드를 모아 놓은 일종의 블루프린트</li>
  <li>특정 메소드를 구현하도록 강제함</li>
  <li>각 클래스들이 같은 함수에 다른 내용을 가질 수 있음
```dart
abstract class Human{     // 추상 클래스 선언
void walk();
}</li>
</ul>

<p>class Player extends Human{   // 추상 클래스 상속
  String name;
  int xp;
  Team team;</p>

<p>Player({required this.name, required this.xp, required this.team});</p>

<p>void walk() =&gt; print(“I’m Walking”);    // 추상 클래스 메소드 구현</p>

<p>void hello(){
    print(“Hi my name is $name”);
  }
}</p>

<p>class Coach extends Human{
  void walk() =&gt; print(“coach is walk”);
}</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
## 상속
--------------
상속받은 클래스(자식클래스)는 부모 클래스 내의 모든 내용을 가져옴
```dart
class Human{
  final String name;
  Human({required this.name});
  void sayHello() =&gt; print("Hi my name is $name");
}

enum Team{blue, red}

class Player extends Human{
  final Team team;
  Player({required this. team, required String name}) : super(name: name);
}

void main(){
  var player = Player(team: Team.red, name: 'mindol');
}
</code></pre></div></div>
<p>💡 super 키워드를 통해 부모 클래스와 상호작용이 가능<br />
super() ← 부모 클래스 생성자<br />
부모 클래스의 메소드를 수정하고 싶을 경우 @override 키워드 사용</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Human</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">String</span> <span class="n">name</span><span class="p">;</span>
  <span class="n">Human</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="p">});</span>
  <span class="kt">void</span> <span class="n">sayHello</span><span class="p">()</span> <span class="o">=</span><span class="p">&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"Hi my name is </span><span class="si">$name</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">enum</span> <span class="n">Team</span><span class="p">{</span><span class="n">blue</span><span class="p">,</span> <span class="n">red</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span> <span class="kd">extends</span> <span class="n">Human</span><span class="p">{</span>
  <span class="kd">final</span> <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>
  <span class="n">Player</span><span class="p">({</span><span class="kd">required</span> <span class="k">this</span><span class="p">.</span> <span class="n">team</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">})</span> <span class="o">:</span> <span class="k">super</span><span class="p">(</span><span class="nl">name:</span> <span class="n">name</span><span class="p">);</span>
  <span class="nd">@override</span>
  <span class="kt">void</span> <span class="n">sayHello</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="na">sayHello</span><span class="p">();</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"and I play for </span><span class="si">$team</span><span class="s">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="mixin-클래스">Mixin 클래스</h2>
<hr />
<p>Mixin : 생성자가 없는 클래스, 클래스에 프로퍼티들을 추가하거나 할 때 주로 사용<br />
(다른 클래스의 프로퍼티와 메소드를 그냥 긁어오는 것 뿐, 상속과는 다른 개념(부모 클래스가 되지 않음)<br />
여러 클래스에 사용이 가능하며, 생성자가 없어야 함</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Strong</span><span class="p">{</span>
  <span class="kd">final</span> <span class="kt">double</span> <span class="n">strengthLevel</span> <span class="o">=</span> <span class="mf">1500.99</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">QuickRunner</span><span class="p">{</span>
  <span class="kt">void</span> <span class="n">runQuick</span><span class="p">(){</span>
    <span class="n">print</span><span class="p">(</span><span class="s">"ruuuuuun"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">enum</span> <span class="n">Team</span><span class="p">{</span><span class="n">blue</span><span class="p">,</span> <span class="n">red</span><span class="p">}</span>

<span class="kd">class</span> <span class="nc">Player</span> <span class="k">with</span> <span class="n">Strong</span><span class="p">,</span> <span class="n">QuickRunner</span><span class="p">{</span>
  <span class="kd">final</span> <span class="n">Team</span> <span class="n">team</span><span class="p">;</span>
  <span class="n">Player</span><span class="p">({</span> <span class="kd">required</span> <span class="k">this</span><span class="p">.</span> <span class="n">team</span><span class="p">,</span> <span class="kd">required</span> <span class="kt">String</span> <span class="n">name</span><span class="p">});</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Horse</span> <span class="k">with</span> <span class="n">Strong</span><span class="p">,</span> <span class="n">QuickRunner</span><span class="p">{}</span>
</code></pre></div></div>]]></content><author><name>Mindol</name></author><category term="Dart" /><category term="Dart" /><summary type="html"><![CDATA[Dart공부 - 클래스]]></summary></entry></feed>